/*
 * Generated by orval v5.4.8 🍺
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import { rest } from "msw";
import faker from "faker";

export const getErrorHtmlUsingGETMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq5s2lq900004ujpcr729h1x: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingHEADMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq5s2lqa00014ujpdd4ibw52: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPOSTMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq5s2lqb00024ujpd21n9srp: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPUTMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq5s2lqd00034ujpbp224jb2: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingDELETEMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq5s2lqd00044ujpf5ysbhp4: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPATCHMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq5s2lqe00054ujpa6b98esl: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getBasicErrorControllerMSW = () => [
  rest.get("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingGETMock())
    );
  }),
  rest.head("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingHEADMock())
    );
  }),
  rest.post("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPOSTMock())
    );
  }),
  rest.put("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPUTMock())
    );
  }),
  rest.delete("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingDELETEMock())
    );
  }),
  rest.patch("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPATCHMock())
    );
  }),
];
