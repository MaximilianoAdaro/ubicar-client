/*
 * Generated by orval v5.4.7 🍺
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import { rest } from "msw";
import faker from "faker";

export const getErrorHtmlUsingGETMock = () =>
  faker.helpers.randomize([
    {
      empty: faker.datatype.boolean(),
      model: {},
      modelMap: {
        ckpwnpsdr000005jpal0e6cnr: {},
      },
      reference: faker.datatype.boolean(),
      status: faker.helpers.randomize([
        "ACCEPTED",
        "ALREADY_REPORTED",
        "BAD_GATEWAY",
        "BAD_REQUEST",
        "BANDWIDTH_LIMIT_EXCEEDED",
        "CHECKPOINT",
        "CONFLICT",
        "CONTINUE",
        "CREATED",
        "DESTINATION_LOCKED",
        "EXPECTATION_FAILED",
        "FAILED_DEPENDENCY",
        "FORBIDDEN",
        "FOUND",
        "GATEWAY_TIMEOUT",
        "GONE",
        "HTTP_VERSION_NOT_SUPPORTED",
        "IM_USED",
        "INSUFFICIENT_SPACE_ON_RESOURCE",
        "INSUFFICIENT_STORAGE",
        "INTERNAL_SERVER_ERROR",
        "I_AM_A_TEAPOT",
        "LENGTH_REQUIRED",
        "LOCKED",
        "LOOP_DETECTED",
        "METHOD_FAILURE",
        "METHOD_NOT_ALLOWED",
        "MOVED_PERMANENTLY",
        "MOVED_TEMPORARILY",
        "MULTIPLE_CHOICES",
        "MULTI_STATUS",
        "NETWORK_AUTHENTICATION_REQUIRED",
        "NON_AUTHORITATIVE_INFORMATION",
        "NOT_ACCEPTABLE",
        "NOT_EXTENDED",
        "NOT_FOUND",
        "NOT_IMPLEMENTED",
        "NOT_MODIFIED",
        "NO_CONTENT",
        "OK",
        "PARTIAL_CONTENT",
        "PAYLOAD_TOO_LARGE",
        "PAYMENT_REQUIRED",
        "PERMANENT_REDIRECT",
        "PRECONDITION_FAILED",
        "PRECONDITION_REQUIRED",
        "PROCESSING",
        "PROXY_AUTHENTICATION_REQUIRED",
        "REQUESTED_RANGE_NOT_SATISFIABLE",
        "REQUEST_ENTITY_TOO_LARGE",
        "REQUEST_HEADER_FIELDS_TOO_LARGE",
        "REQUEST_TIMEOUT",
        "REQUEST_URI_TOO_LONG",
        "RESET_CONTENT",
        "SEE_OTHER",
        "SERVICE_UNAVAILABLE",
        "SWITCHING_PROTOCOLS",
        "TEMPORARY_REDIRECT",
        "TOO_EARLY",
        "TOO_MANY_REQUESTS",
        "UNAUTHORIZED",
        "UNAVAILABLE_FOR_LEGAL_REASONS",
        "UNPROCESSABLE_ENTITY",
        "UNSUPPORTED_MEDIA_TYPE",
        "UPGRADE_REQUIRED",
        "URI_TOO_LONG",
        "USE_PROXY",
        "VARIANT_ALSO_NEGOTIATES",
      ]),
      view: { contentType: faker.random.word() },
      viewName: faker.random.word(),
    },
    undefined,
  ]);

export const getErrorHtmlUsingHEADMock = () =>
  faker.helpers.randomize([
    {
      empty: faker.datatype.boolean(),
      model: {},
      modelMap: {
        ckpwnpsds000105jpbyosefw2: {},
      },
      reference: faker.datatype.boolean(),
      status: faker.helpers.randomize([
        "ACCEPTED",
        "ALREADY_REPORTED",
        "BAD_GATEWAY",
        "BAD_REQUEST",
        "BANDWIDTH_LIMIT_EXCEEDED",
        "CHECKPOINT",
        "CONFLICT",
        "CONTINUE",
        "CREATED",
        "DESTINATION_LOCKED",
        "EXPECTATION_FAILED",
        "FAILED_DEPENDENCY",
        "FORBIDDEN",
        "FOUND",
        "GATEWAY_TIMEOUT",
        "GONE",
        "HTTP_VERSION_NOT_SUPPORTED",
        "IM_USED",
        "INSUFFICIENT_SPACE_ON_RESOURCE",
        "INSUFFICIENT_STORAGE",
        "INTERNAL_SERVER_ERROR",
        "I_AM_A_TEAPOT",
        "LENGTH_REQUIRED",
        "LOCKED",
        "LOOP_DETECTED",
        "METHOD_FAILURE",
        "METHOD_NOT_ALLOWED",
        "MOVED_PERMANENTLY",
        "MOVED_TEMPORARILY",
        "MULTIPLE_CHOICES",
        "MULTI_STATUS",
        "NETWORK_AUTHENTICATION_REQUIRED",
        "NON_AUTHORITATIVE_INFORMATION",
        "NOT_ACCEPTABLE",
        "NOT_EXTENDED",
        "NOT_FOUND",
        "NOT_IMPLEMENTED",
        "NOT_MODIFIED",
        "NO_CONTENT",
        "OK",
        "PARTIAL_CONTENT",
        "PAYLOAD_TOO_LARGE",
        "PAYMENT_REQUIRED",
        "PERMANENT_REDIRECT",
        "PRECONDITION_FAILED",
        "PRECONDITION_REQUIRED",
        "PROCESSING",
        "PROXY_AUTHENTICATION_REQUIRED",
        "REQUESTED_RANGE_NOT_SATISFIABLE",
        "REQUEST_ENTITY_TOO_LARGE",
        "REQUEST_HEADER_FIELDS_TOO_LARGE",
        "REQUEST_TIMEOUT",
        "REQUEST_URI_TOO_LONG",
        "RESET_CONTENT",
        "SEE_OTHER",
        "SERVICE_UNAVAILABLE",
        "SWITCHING_PROTOCOLS",
        "TEMPORARY_REDIRECT",
        "TOO_EARLY",
        "TOO_MANY_REQUESTS",
        "UNAUTHORIZED",
        "UNAVAILABLE_FOR_LEGAL_REASONS",
        "UNPROCESSABLE_ENTITY",
        "UNSUPPORTED_MEDIA_TYPE",
        "UPGRADE_REQUIRED",
        "URI_TOO_LONG",
        "USE_PROXY",
        "VARIANT_ALSO_NEGOTIATES",
      ]),
      view: { contentType: faker.random.word() },
      viewName: faker.random.word(),
    },
    undefined,
  ]);

export const getErrorHtmlUsingPOSTMock = () =>
  faker.helpers.randomize([
    {
      empty: faker.datatype.boolean(),
      model: {},
      modelMap: {
        ckpwnpsds000205jp3bqbdf33: {},
      },
      reference: faker.datatype.boolean(),
      status: faker.helpers.randomize([
        "ACCEPTED",
        "ALREADY_REPORTED",
        "BAD_GATEWAY",
        "BAD_REQUEST",
        "BANDWIDTH_LIMIT_EXCEEDED",
        "CHECKPOINT",
        "CONFLICT",
        "CONTINUE",
        "CREATED",
        "DESTINATION_LOCKED",
        "EXPECTATION_FAILED",
        "FAILED_DEPENDENCY",
        "FORBIDDEN",
        "FOUND",
        "GATEWAY_TIMEOUT",
        "GONE",
        "HTTP_VERSION_NOT_SUPPORTED",
        "IM_USED",
        "INSUFFICIENT_SPACE_ON_RESOURCE",
        "INSUFFICIENT_STORAGE",
        "INTERNAL_SERVER_ERROR",
        "I_AM_A_TEAPOT",
        "LENGTH_REQUIRED",
        "LOCKED",
        "LOOP_DETECTED",
        "METHOD_FAILURE",
        "METHOD_NOT_ALLOWED",
        "MOVED_PERMANENTLY",
        "MOVED_TEMPORARILY",
        "MULTIPLE_CHOICES",
        "MULTI_STATUS",
        "NETWORK_AUTHENTICATION_REQUIRED",
        "NON_AUTHORITATIVE_INFORMATION",
        "NOT_ACCEPTABLE",
        "NOT_EXTENDED",
        "NOT_FOUND",
        "NOT_IMPLEMENTED",
        "NOT_MODIFIED",
        "NO_CONTENT",
        "OK",
        "PARTIAL_CONTENT",
        "PAYLOAD_TOO_LARGE",
        "PAYMENT_REQUIRED",
        "PERMANENT_REDIRECT",
        "PRECONDITION_FAILED",
        "PRECONDITION_REQUIRED",
        "PROCESSING",
        "PROXY_AUTHENTICATION_REQUIRED",
        "REQUESTED_RANGE_NOT_SATISFIABLE",
        "REQUEST_ENTITY_TOO_LARGE",
        "REQUEST_HEADER_FIELDS_TOO_LARGE",
        "REQUEST_TIMEOUT",
        "REQUEST_URI_TOO_LONG",
        "RESET_CONTENT",
        "SEE_OTHER",
        "SERVICE_UNAVAILABLE",
        "SWITCHING_PROTOCOLS",
        "TEMPORARY_REDIRECT",
        "TOO_EARLY",
        "TOO_MANY_REQUESTS",
        "UNAUTHORIZED",
        "UNAVAILABLE_FOR_LEGAL_REASONS",
        "UNPROCESSABLE_ENTITY",
        "UNSUPPORTED_MEDIA_TYPE",
        "UPGRADE_REQUIRED",
        "URI_TOO_LONG",
        "USE_PROXY",
        "VARIANT_ALSO_NEGOTIATES",
      ]),
      view: { contentType: faker.random.word() },
      viewName: faker.random.word(),
    },
    undefined,
  ]);

export const getErrorHtmlUsingPUTMock = () =>
  faker.helpers.randomize([
    {
      empty: faker.datatype.boolean(),
      model: {},
      modelMap: {
        ckpwnpsdt000305jpdknzajw1: {},
      },
      reference: faker.datatype.boolean(),
      status: faker.helpers.randomize([
        "ACCEPTED",
        "ALREADY_REPORTED",
        "BAD_GATEWAY",
        "BAD_REQUEST",
        "BANDWIDTH_LIMIT_EXCEEDED",
        "CHECKPOINT",
        "CONFLICT",
        "CONTINUE",
        "CREATED",
        "DESTINATION_LOCKED",
        "EXPECTATION_FAILED",
        "FAILED_DEPENDENCY",
        "FORBIDDEN",
        "FOUND",
        "GATEWAY_TIMEOUT",
        "GONE",
        "HTTP_VERSION_NOT_SUPPORTED",
        "IM_USED",
        "INSUFFICIENT_SPACE_ON_RESOURCE",
        "INSUFFICIENT_STORAGE",
        "INTERNAL_SERVER_ERROR",
        "I_AM_A_TEAPOT",
        "LENGTH_REQUIRED",
        "LOCKED",
        "LOOP_DETECTED",
        "METHOD_FAILURE",
        "METHOD_NOT_ALLOWED",
        "MOVED_PERMANENTLY",
        "MOVED_TEMPORARILY",
        "MULTIPLE_CHOICES",
        "MULTI_STATUS",
        "NETWORK_AUTHENTICATION_REQUIRED",
        "NON_AUTHORITATIVE_INFORMATION",
        "NOT_ACCEPTABLE",
        "NOT_EXTENDED",
        "NOT_FOUND",
        "NOT_IMPLEMENTED",
        "NOT_MODIFIED",
        "NO_CONTENT",
        "OK",
        "PARTIAL_CONTENT",
        "PAYLOAD_TOO_LARGE",
        "PAYMENT_REQUIRED",
        "PERMANENT_REDIRECT",
        "PRECONDITION_FAILED",
        "PRECONDITION_REQUIRED",
        "PROCESSING",
        "PROXY_AUTHENTICATION_REQUIRED",
        "REQUESTED_RANGE_NOT_SATISFIABLE",
        "REQUEST_ENTITY_TOO_LARGE",
        "REQUEST_HEADER_FIELDS_TOO_LARGE",
        "REQUEST_TIMEOUT",
        "REQUEST_URI_TOO_LONG",
        "RESET_CONTENT",
        "SEE_OTHER",
        "SERVICE_UNAVAILABLE",
        "SWITCHING_PROTOCOLS",
        "TEMPORARY_REDIRECT",
        "TOO_EARLY",
        "TOO_MANY_REQUESTS",
        "UNAUTHORIZED",
        "UNAVAILABLE_FOR_LEGAL_REASONS",
        "UNPROCESSABLE_ENTITY",
        "UNSUPPORTED_MEDIA_TYPE",
        "UPGRADE_REQUIRED",
        "URI_TOO_LONG",
        "USE_PROXY",
        "VARIANT_ALSO_NEGOTIATES",
      ]),
      view: { contentType: faker.random.word() },
      viewName: faker.random.word(),
    },
    undefined,
  ]);

export const getErrorHtmlUsingDELETEMock = () =>
  faker.helpers.randomize([
    {
      empty: faker.datatype.boolean(),
      model: {},
      modelMap: {
        ckpwnpsdu000405jp9lj5945i: {},
      },
      reference: faker.datatype.boolean(),
      status: faker.helpers.randomize([
        "ACCEPTED",
        "ALREADY_REPORTED",
        "BAD_GATEWAY",
        "BAD_REQUEST",
        "BANDWIDTH_LIMIT_EXCEEDED",
        "CHECKPOINT",
        "CONFLICT",
        "CONTINUE",
        "CREATED",
        "DESTINATION_LOCKED",
        "EXPECTATION_FAILED",
        "FAILED_DEPENDENCY",
        "FORBIDDEN",
        "FOUND",
        "GATEWAY_TIMEOUT",
        "GONE",
        "HTTP_VERSION_NOT_SUPPORTED",
        "IM_USED",
        "INSUFFICIENT_SPACE_ON_RESOURCE",
        "INSUFFICIENT_STORAGE",
        "INTERNAL_SERVER_ERROR",
        "I_AM_A_TEAPOT",
        "LENGTH_REQUIRED",
        "LOCKED",
        "LOOP_DETECTED",
        "METHOD_FAILURE",
        "METHOD_NOT_ALLOWED",
        "MOVED_PERMANENTLY",
        "MOVED_TEMPORARILY",
        "MULTIPLE_CHOICES",
        "MULTI_STATUS",
        "NETWORK_AUTHENTICATION_REQUIRED",
        "NON_AUTHORITATIVE_INFORMATION",
        "NOT_ACCEPTABLE",
        "NOT_EXTENDED",
        "NOT_FOUND",
        "NOT_IMPLEMENTED",
        "NOT_MODIFIED",
        "NO_CONTENT",
        "OK",
        "PARTIAL_CONTENT",
        "PAYLOAD_TOO_LARGE",
        "PAYMENT_REQUIRED",
        "PERMANENT_REDIRECT",
        "PRECONDITION_FAILED",
        "PRECONDITION_REQUIRED",
        "PROCESSING",
        "PROXY_AUTHENTICATION_REQUIRED",
        "REQUESTED_RANGE_NOT_SATISFIABLE",
        "REQUEST_ENTITY_TOO_LARGE",
        "REQUEST_HEADER_FIELDS_TOO_LARGE",
        "REQUEST_TIMEOUT",
        "REQUEST_URI_TOO_LONG",
        "RESET_CONTENT",
        "SEE_OTHER",
        "SERVICE_UNAVAILABLE",
        "SWITCHING_PROTOCOLS",
        "TEMPORARY_REDIRECT",
        "TOO_EARLY",
        "TOO_MANY_REQUESTS",
        "UNAUTHORIZED",
        "UNAVAILABLE_FOR_LEGAL_REASONS",
        "UNPROCESSABLE_ENTITY",
        "UNSUPPORTED_MEDIA_TYPE",
        "UPGRADE_REQUIRED",
        "URI_TOO_LONG",
        "USE_PROXY",
        "VARIANT_ALSO_NEGOTIATES",
      ]),
      view: { contentType: faker.random.word() },
      viewName: faker.random.word(),
    },
    undefined,
  ]);

export const getErrorHtmlUsingPATCHMock = () =>
  faker.helpers.randomize([
    {
      empty: faker.datatype.boolean(),
      model: {},
      modelMap: {
        ckpwnpsdu000505jp9iuj8263: {},
      },
      reference: faker.datatype.boolean(),
      status: faker.helpers.randomize([
        "ACCEPTED",
        "ALREADY_REPORTED",
        "BAD_GATEWAY",
        "BAD_REQUEST",
        "BANDWIDTH_LIMIT_EXCEEDED",
        "CHECKPOINT",
        "CONFLICT",
        "CONTINUE",
        "CREATED",
        "DESTINATION_LOCKED",
        "EXPECTATION_FAILED",
        "FAILED_DEPENDENCY",
        "FORBIDDEN",
        "FOUND",
        "GATEWAY_TIMEOUT",
        "GONE",
        "HTTP_VERSION_NOT_SUPPORTED",
        "IM_USED",
        "INSUFFICIENT_SPACE_ON_RESOURCE",
        "INSUFFICIENT_STORAGE",
        "INTERNAL_SERVER_ERROR",
        "I_AM_A_TEAPOT",
        "LENGTH_REQUIRED",
        "LOCKED",
        "LOOP_DETECTED",
        "METHOD_FAILURE",
        "METHOD_NOT_ALLOWED",
        "MOVED_PERMANENTLY",
        "MOVED_TEMPORARILY",
        "MULTIPLE_CHOICES",
        "MULTI_STATUS",
        "NETWORK_AUTHENTICATION_REQUIRED",
        "NON_AUTHORITATIVE_INFORMATION",
        "NOT_ACCEPTABLE",
        "NOT_EXTENDED",
        "NOT_FOUND",
        "NOT_IMPLEMENTED",
        "NOT_MODIFIED",
        "NO_CONTENT",
        "OK",
        "PARTIAL_CONTENT",
        "PAYLOAD_TOO_LARGE",
        "PAYMENT_REQUIRED",
        "PERMANENT_REDIRECT",
        "PRECONDITION_FAILED",
        "PRECONDITION_REQUIRED",
        "PROCESSING",
        "PROXY_AUTHENTICATION_REQUIRED",
        "REQUESTED_RANGE_NOT_SATISFIABLE",
        "REQUEST_ENTITY_TOO_LARGE",
        "REQUEST_HEADER_FIELDS_TOO_LARGE",
        "REQUEST_TIMEOUT",
        "REQUEST_URI_TOO_LONG",
        "RESET_CONTENT",
        "SEE_OTHER",
        "SERVICE_UNAVAILABLE",
        "SWITCHING_PROTOCOLS",
        "TEMPORARY_REDIRECT",
        "TOO_EARLY",
        "TOO_MANY_REQUESTS",
        "UNAUTHORIZED",
        "UNAVAILABLE_FOR_LEGAL_REASONS",
        "UNPROCESSABLE_ENTITY",
        "UNSUPPORTED_MEDIA_TYPE",
        "UPGRADE_REQUIRED",
        "URI_TOO_LONG",
        "USE_PROXY",
        "VARIANT_ALSO_NEGOTIATES",
      ]),
      view: { contentType: faker.random.word() },
      viewName: faker.random.word(),
    },
    undefined,
  ]);

export const getBasicErrorControllerMSW = () => [
  rest.get("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingGETMock())
    );
  }),
  rest.head("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingHEADMock())
    );
  }),
  rest.post("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPOSTMock())
    );
  }),
  rest.put("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPUTMock())
    );
  }),
  rest.delete("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingDELETEMock())
    );
  }),
  rest.patch("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPATCHMock())
    );
  }),
];
