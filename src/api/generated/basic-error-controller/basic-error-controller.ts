/*
 * Generated by orval v5.4.6 üç∫
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from "react-query";
import type {
  ErrorUsingGET200,
  ErrorUsingHEAD200,
  ErrorUsingPOST200,
  ErrorUsingPUT200,
  ErrorUsingDELETE200,
  ErrorUsingPATCH200,
} from "../endpoints.schemas";
import { customInstance } from "../../mutator/custom-instance";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const errorUsingGET = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? ErrorUsingGET200 : Data>(
    { url: `/error`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getErrorUsingGETQueryKey = () => [`/error`];

export const useErrorUsingGET = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof errorUsingGET>, Error>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getErrorUsingGETQueryKey();
  const query = useQuery<AsyncReturnType<typeof errorUsingGET>, Error>(
    queryKey,
    () => errorUsingGET<Data>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const errorUsingHEAD = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    Data extends unknown ? ErrorUsingHEAD200 | unknown : Data
  >(
    { url: `/error`, method: "head" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useErrorUsingHEAD = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof errorUsingHEAD>,
    Error,
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<AsyncReturnType<typeof errorUsingHEAD>, Error>(() => {
    return errorUsingHEAD<Data>(requestOptions);
  }, mutationOptions);
};
export const errorUsingPOST = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    Data extends unknown ? ErrorUsingPOST200 | unknown : Data
  >(
    { url: `/error`, method: "post", data: undefined },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useErrorUsingPOST = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof errorUsingPOST>,
    Error,
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<AsyncReturnType<typeof errorUsingPOST>, Error>(() => {
    return errorUsingPOST<Data>(requestOptions);
  }, mutationOptions);
};
export const errorUsingPUT = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    Data extends unknown ? ErrorUsingPUT200 | unknown : Data
  >(
    { url: `/error`, method: "put", data: undefined },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useErrorUsingPUT = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof errorUsingPUT>,
    Error,
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<AsyncReturnType<typeof errorUsingPUT>, Error>(() => {
    return errorUsingPUT<Data>(requestOptions);
  }, mutationOptions);
};
export const errorUsingDELETE = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    Data extends unknown ? ErrorUsingDELETE200 | unknown : Data
  >(
    { url: `/error`, method: "delete" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useErrorUsingDELETE = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof errorUsingDELETE>,
    Error,
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<AsyncReturnType<typeof errorUsingDELETE>, Error>(() => {
    return errorUsingDELETE<Data>(requestOptions);
  }, mutationOptions);
};
export const errorUsingPATCH = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    Data extends unknown ? ErrorUsingPATCH200 | unknown : Data
  >(
    { url: `/error`, method: "patch", data: undefined },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useErrorUsingPATCH = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof errorUsingPATCH>,
    Error,
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<AsyncReturnType<typeof errorUsingPATCH>, Error>(() => {
    return errorUsingPATCH<Data>(requestOptions);
  }, mutationOptions);
};
