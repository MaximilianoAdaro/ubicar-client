/*
 * Generated by orval v5.4.8 üç∫
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import { useMutation, UseMutationOptions } from "react-query";
import type { PropertyDTO } from "../endpoints.schemas";
import { customInstance } from "../../mutator/custom-instance";

type AsyncReturnType<
  T extends (...args: any) => Promise<any>,
  U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const dislikePropertyUsingPUT = <TData = PropertyDTO>(
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TData>(
    { url: `/dislike/${id}`, method: "put", data: undefined },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useDislikePropertyUsingPUT = <
  TData = AsyncReturnType<typeof dislikePropertyUsingPUT, PropertyDTO>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { id: string }, TContext>((props) => {
    const { id } = props || {};

    return dislikePropertyUsingPUT<TData>(id, requestOptions);
  }, mutationOptions);
};
export const likePropertyUsingPUT = <TData = PropertyDTO>(
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TData>(
    { url: `/like/${id}`, method: "put", data: undefined },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useLikePropertyUsingPUT = <
  TData = AsyncReturnType<typeof likePropertyUsingPUT, PropertyDTO>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { id: string }, TContext>((props) => {
    const { id } = props || {};

    return likePropertyUsingPUT<TData>(id, requestOptions);
  }, mutationOptions);
};
