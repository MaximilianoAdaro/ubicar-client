/*
 * Generated by orval v5.4.6 üç∫
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from "react-query";
import type {
  UserDTO,
  GoogleLoginUserDTO,
  LogInUserDTO,
  Unit,
  UserCreationDTO,
  RoleDTO,
} from "../endpoints.schemas";
import { customInstance } from "../../mutator/custom-instance";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const loginWithGoogleUsingPOST = <Data = unknown>(
  googleLoginUserDTO: GoogleLoginUserDTO,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? UserDTO | unknown : Data>(
    { url: `/auth/google-login`, method: "post", data: googleLoginUserDTO },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useLoginWithGoogleUsingPOST = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof loginWithGoogleUsingPOST>,
    Error,
    { data: GoogleLoginUserDTO },
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    AsyncReturnType<typeof loginWithGoogleUsingPOST>,
    Error,
    { data: GoogleLoginUserDTO }
  >((props) => {
    const { data } = props || {};

    return loginWithGoogleUsingPOST<Data>(data, requestOptions);
  }, mutationOptions);
};
export const loginUsingPOST = <Data = unknown>(
  logInUserDTO: LogInUserDTO,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? UserDTO | unknown : Data>(
    { url: `/auth/login`, method: "post", data: logInUserDTO },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useLoginUsingPOST = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof loginUsingPOST>,
    Error,
    { data: LogInUserDTO },
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    AsyncReturnType<typeof loginUsingPOST>,
    Error,
    { data: LogInUserDTO }
  >((props) => {
    const { data } = props || {};

    return loginUsingPOST<Data>(data, requestOptions);
  }, mutationOptions);
};
export const logOutUsingPOST = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? Unit | unknown : Data>(
    { url: `/auth/logout`, method: "post", data: undefined },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useLogOutUsingPOST = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof logOutUsingPOST>,
    Error,
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<AsyncReturnType<typeof logOutUsingPOST>, Error>(() => {
    return logOutUsingPOST<Data>(requestOptions);
  }, mutationOptions);
};
export const getLoggedUsingGET = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? UserDTO : Data>(
    { url: `/auth/me`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetLoggedUsingGETQueryKey = () => [`/auth/me`];

export const useGetLoggedUsingGET = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof getLoggedUsingGET>, Error>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetLoggedUsingGETQueryKey();
  const query = useQuery<AsyncReturnType<typeof getLoggedUsingGET>, Error>(
    queryKey,
    () => getLoggedUsingGET<Data>(requestOptions),
    {
      retry: false,
      refetchInterval: false,
      refetchOnMount: false,
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
      retryOnMount: false,
      refetchIntervalInBackground: false,
      ...queryOptions,
    }
  );

  return {
    queryKey,
    ...query,
  };
};

export const registerUsingPOST = <Data = unknown>(
  userCreationDTO: UserCreationDTO,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? UserDTO | unknown : Data>(
    { url: `/auth/register`, method: "post", data: userCreationDTO },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useRegisterUsingPOST = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof registerUsingPOST>,
    Error,
    { data: UserCreationDTO },
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    AsyncReturnType<typeof registerUsingPOST>,
    Error,
    { data: UserCreationDTO }
  >((props) => {
    const { data } = props || {};

    return registerUsingPOST<Data>(data, requestOptions);
  }, mutationOptions);
};
export const getRolesUsingGET = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? RoleDTO[] : Data>(
    { url: `/auth/roles`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetRolesUsingGETQueryKey = () => [`/auth/roles`];

export const useGetRolesUsingGET = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof getRolesUsingGET>, Error>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetRolesUsingGETQueryKey();
  const query = useQuery<AsyncReturnType<typeof getRolesUsingGET>, Error>(
    queryKey,
    () => getRolesUsingGET<Data>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};
