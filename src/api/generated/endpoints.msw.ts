/*
 * Generated by orval v5.4.8 🍺
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import { rest } from "msw";
import faker from "faker";

export const getLoginWithGoogleUsingPOSTMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getLoginUsingPOSTMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getLogOutUsingPOSTMock = () => ({});

export const getGetLoggedUsingGETMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getRegisterUsingPOSTMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getDislikePropertyUsingPUTMock = () => ({
  address: {
    department: faker.random.word(),
    id: (() => faker.datatype.uuid())(),
    number: faker.datatype.number(),
    postalCode: faker.random.word(),
    street: faker.random.word(),
    town: {
      city: {
        id: (() => faker.datatype.uuid())(),
        name: faker.random.word(),
        state: {
          country: {
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
          id: (() => faker.datatype.uuid())(),
          name: faker.random.word(),
        },
      },
      id: (() => faker.datatype.uuid())(),
      name: faker.random.word(),
    },
  },
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: {
          department: faker.random.word(),
          id: (() => faker.datatype.uuid())(),
          number: faker.datatype.number(),
          postalCode: faker.random.word(),
          street: faker.random.word(),
          town: {
            city: {
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
        },
        comments: faker.random.word(),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.datatype.number(),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.datatype.number(),
        creationDate: faker.date.recent(),
        environments: faker.datatype.number(),
        expenses: faker.datatype.number(),
        fullBaths: faker.datatype.number(),
        id: (() => faker.datatype.uuid())(),
        levels: faker.datatype.number(),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: {
                department: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                postalCode: faker.random.word(),
                street: faker.random.word(),
                town: {
                  city: {
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
              },
              comments: faker.random.word(),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.datatype.number(),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.datatype.number(),
              creationDate: faker.date.recent(),
              environments: faker.datatype.number(),
              expenses: faker.datatype.number(),
              fullBaths: faker.datatype.number(),
              id: (() => faker.datatype.uuid())(),
              levels: faker.datatype.number(),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              parkDescription: faker.random.word(),
              price: faker.datatype.number(),
              rooms: faker.datatype.number(),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.datatype.number(),
              style: {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              title: faker.random.word(),
              toilets: faker.datatype.number(),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        parkDescription: faker.random.word(),
        price: faker.datatype.number(),
        rooms: faker.datatype.number(),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.datatype.number(),
        style: {
          id: (() => faker.datatype.uuid())(),
          label: faker.random.word(),
        },
        title: faker.random.word(),
        toilets: faker.datatype.number(),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.datatype.number(),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.datatype.number(),
  environments: faker.datatype.number(),
  expenses: faker.datatype.number(),
  fullBaths: faker.datatype.number(),
  id: (() => faker.datatype.uuid())(),
  levels: faker.datatype.number(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.random.word(),
  price: faker.datatype.number(),
  rooms: faker.datatype.number(),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.datatype.number(),
  style: { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
  title: faker.random.word(),
  toilets: faker.datatype.number(),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getErrorHtmlUsingGETMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq7gbovx00007cjpd22h1umf: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingHEADMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq7gbovy00017cjpevh80lbx: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPOSTMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq7gbovy00027cjpea2h6lwi: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPUTMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq7gbovz00037cjp25avgq9k: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingDELETEMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq7gbow000047cjp9n2bb8qo: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPATCHMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      ckq7gbow000057cjp3n38gnte: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getLikePropertyUsingPUTMock = () => ({
  address: {
    department: faker.random.word(),
    id: (() => faker.datatype.uuid())(),
    number: faker.datatype.number(),
    postalCode: faker.random.word(),
    street: faker.random.word(),
    town: {
      city: {
        id: (() => faker.datatype.uuid())(),
        name: faker.random.word(),
        state: {
          country: {
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
          id: (() => faker.datatype.uuid())(),
          name: faker.random.word(),
        },
      },
      id: (() => faker.datatype.uuid())(),
      name: faker.random.word(),
    },
  },
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: {
          department: faker.random.word(),
          id: (() => faker.datatype.uuid())(),
          number: faker.datatype.number(),
          postalCode: faker.random.word(),
          street: faker.random.word(),
          town: {
            city: {
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
        },
        comments: faker.random.word(),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.datatype.number(),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.datatype.number(),
        creationDate: faker.date.recent(),
        environments: faker.datatype.number(),
        expenses: faker.datatype.number(),
        fullBaths: faker.datatype.number(),
        id: (() => faker.datatype.uuid())(),
        levels: faker.datatype.number(),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: {
                department: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                postalCode: faker.random.word(),
                street: faker.random.word(),
                town: {
                  city: {
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
              },
              comments: faker.random.word(),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.datatype.number(),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.datatype.number(),
              creationDate: faker.date.recent(),
              environments: faker.datatype.number(),
              expenses: faker.datatype.number(),
              fullBaths: faker.datatype.number(),
              id: (() => faker.datatype.uuid())(),
              levels: faker.datatype.number(),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              parkDescription: faker.random.word(),
              price: faker.datatype.number(),
              rooms: faker.datatype.number(),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.datatype.number(),
              style: {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              title: faker.random.word(),
              toilets: faker.datatype.number(),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        parkDescription: faker.random.word(),
        price: faker.datatype.number(),
        rooms: faker.datatype.number(),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.datatype.number(),
        style: {
          id: (() => faker.datatype.uuid())(),
          label: faker.random.word(),
        },
        title: faker.random.word(),
        toilets: faker.datatype.number(),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.datatype.number(),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.datatype.number(),
  environments: faker.datatype.number(),
  expenses: faker.datatype.number(),
  fullBaths: faker.datatype.number(),
  id: (() => faker.datatype.uuid())(),
  levels: faker.datatype.number(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.random.word(),
  price: faker.datatype.number(),
  rooms: faker.datatype.number(),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.datatype.number(),
  style: { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
  title: faker.random.word(),
  toilets: faker.datatype.number(),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getCreatePropertyUsingPOSTMock = () => ({
  address: {
    department: faker.random.word(),
    id: (() => faker.datatype.uuid())(),
    number: faker.datatype.number(),
    postalCode: faker.random.word(),
    street: faker.random.word(),
    town: {
      city: {
        id: (() => faker.datatype.uuid())(),
        name: faker.random.word(),
        state: {
          country: {
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
          id: (() => faker.datatype.uuid())(),
          name: faker.random.word(),
        },
      },
      id: (() => faker.datatype.uuid())(),
      name: faker.random.word(),
    },
  },
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: {
          department: faker.random.word(),
          id: (() => faker.datatype.uuid())(),
          number: faker.datatype.number(),
          postalCode: faker.random.word(),
          street: faker.random.word(),
          town: {
            city: {
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
        },
        comments: faker.random.word(),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.datatype.number(),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.datatype.number(),
        creationDate: faker.date.recent(),
        environments: faker.datatype.number(),
        expenses: faker.datatype.number(),
        fullBaths: faker.datatype.number(),
        id: (() => faker.datatype.uuid())(),
        levels: faker.datatype.number(),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: {
                department: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                postalCode: faker.random.word(),
                street: faker.random.word(),
                town: {
                  city: {
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
              },
              comments: faker.random.word(),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.datatype.number(),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.datatype.number(),
              creationDate: faker.date.recent(),
              environments: faker.datatype.number(),
              expenses: faker.datatype.number(),
              fullBaths: faker.datatype.number(),
              id: (() => faker.datatype.uuid())(),
              levels: faker.datatype.number(),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              parkDescription: faker.random.word(),
              price: faker.datatype.number(),
              rooms: faker.datatype.number(),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.datatype.number(),
              style: {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              title: faker.random.word(),
              toilets: faker.datatype.number(),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        parkDescription: faker.random.word(),
        price: faker.datatype.number(),
        rooms: faker.datatype.number(),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.datatype.number(),
        style: {
          id: (() => faker.datatype.uuid())(),
          label: faker.random.word(),
        },
        title: faker.random.word(),
        toilets: faker.datatype.number(),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.datatype.number(),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.datatype.number(),
  environments: faker.datatype.number(),
  expenses: faker.datatype.number(),
  fullBaths: faker.datatype.number(),
  id: (() => faker.datatype.uuid())(),
  levels: faker.datatype.number(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.random.word(),
  price: faker.datatype.number(),
  rooms: faker.datatype.number(),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.datatype.number(),
  style: { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
  title: faker.random.word(),
  toilets: faker.datatype.number(),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getEditPropertyUsingPUTMock = () => ({
  address: {
    department: faker.random.word(),
    id: (() => faker.datatype.uuid())(),
    number: faker.datatype.number(),
    postalCode: faker.random.word(),
    street: faker.random.word(),
    town: {
      city: {
        id: (() => faker.datatype.uuid())(),
        name: faker.random.word(),
        state: {
          country: {
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
          id: (() => faker.datatype.uuid())(),
          name: faker.random.word(),
        },
      },
      id: (() => faker.datatype.uuid())(),
      name: faker.random.word(),
    },
  },
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: {
          department: faker.random.word(),
          id: (() => faker.datatype.uuid())(),
          number: faker.datatype.number(),
          postalCode: faker.random.word(),
          street: faker.random.word(),
          town: {
            city: {
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
        },
        comments: faker.random.word(),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.datatype.number(),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.datatype.number(),
        creationDate: faker.date.recent(),
        environments: faker.datatype.number(),
        expenses: faker.datatype.number(),
        fullBaths: faker.datatype.number(),
        id: (() => faker.datatype.uuid())(),
        levels: faker.datatype.number(),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: {
                department: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                postalCode: faker.random.word(),
                street: faker.random.word(),
                town: {
                  city: {
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
              },
              comments: faker.random.word(),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.datatype.number(),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.datatype.number(),
              creationDate: faker.date.recent(),
              environments: faker.datatype.number(),
              expenses: faker.datatype.number(),
              fullBaths: faker.datatype.number(),
              id: (() => faker.datatype.uuid())(),
              levels: faker.datatype.number(),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              parkDescription: faker.random.word(),
              price: faker.datatype.number(),
              rooms: faker.datatype.number(),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.datatype.number(),
              style: {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              title: faker.random.word(),
              toilets: faker.datatype.number(),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        parkDescription: faker.random.word(),
        price: faker.datatype.number(),
        rooms: faker.datatype.number(),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.datatype.number(),
        style: {
          id: (() => faker.datatype.uuid())(),
          label: faker.random.word(),
        },
        title: faker.random.word(),
        toilets: faker.datatype.number(),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.datatype.number(),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.datatype.number(),
  environments: faker.datatype.number(),
  expenses: faker.datatype.number(),
  fullBaths: faker.datatype.number(),
  id: (() => faker.datatype.uuid())(),
  levels: faker.datatype.number(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.random.word(),
  price: faker.datatype.number(),
  rooms: faker.datatype.number(),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.datatype.number(),
  style: { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
  title: faker.random.word(),
  toilets: faker.datatype.number(),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getGetPropertiesUsingGETMock = () => ({
  content: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
      address: {
        department: faker.random.word(),
        id: (() => faker.datatype.uuid())(),
        number: faker.datatype.number(),
        postalCode: faker.random.word(),
        street: faker.random.word(),
        town: {
          city: {
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
            state: {
              country: {
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
            },
          },
          id: (() => faker.datatype.uuid())(),
          name: faker.random.word(),
        },
      },
      condition: faker.helpers.randomize(["RENT", "SALE"]),
      coveredSquareFoot: faker.datatype.number(),
      fullBaths: faker.datatype.number(),
      id: (() => faker.datatype.uuid())(),
      price: faker.datatype.number(),
      rooms: faker.datatype.number(),
      squareFoot: faker.datatype.number(),
      title: faker.random.word(),
      toilets: faker.datatype.number(),
      type: faker.helpers.randomize([
        "Casa",
        "Cochera",
        "Compartido",
        "Consultorio",
        "Country",
        "Departamento",
        "Edificio",
        "Flat",
        "Galpon",
        "Hotel",
        "Local",
        "Loft",
        "Oficina",
        "PH",
        "Quinta",
        "Terreno",
      ]),
    })),
    undefined,
  ]),
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  first: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  last: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  number: faker.helpers.randomize([faker.datatype.number(), undefined]),
  numberOfElements: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  pageable: faker.helpers.randomize([
    {
      offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageNumber: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageSize: faker.helpers.randomize([faker.datatype.number(), undefined]),
      paged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sort: faker.helpers.randomize([
        {
          empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
          sorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
        },
        undefined,
      ]),
      unpaged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  size: faker.helpers.randomize([faker.datatype.number(), undefined]),
  sort: faker.helpers.randomize([
    {
      empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  totalElements: faker.helpers.randomize([faker.datatype.number(), undefined]),
  totalPages: faker.helpers.randomize([faker.datatype.number(), undefined]),
});

export const getGetPropertiesFilteredUsingPOSTMock = () => ({
  content: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
      address: {
        department: faker.random.word(),
        id: (() => faker.datatype.uuid())(),
        number: faker.datatype.number(),
        postalCode: faker.random.word(),
        street: faker.random.word(),
        town: {
          city: {
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
            state: {
              country: {
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
            },
          },
          id: (() => faker.datatype.uuid())(),
          name: faker.random.word(),
        },
      },
      condition: faker.helpers.randomize(["RENT", "SALE"]),
      coveredSquareFoot: faker.datatype.number(),
      fullBaths: faker.datatype.number(),
      id: (() => faker.datatype.uuid())(),
      price: faker.datatype.number(),
      rooms: faker.datatype.number(),
      squareFoot: faker.datatype.number(),
      title: faker.random.word(),
      toilets: faker.datatype.number(),
      type: faker.helpers.randomize([
        "Casa",
        "Cochera",
        "Compartido",
        "Consultorio",
        "Country",
        "Departamento",
        "Edificio",
        "Flat",
        "Galpon",
        "Hotel",
        "Local",
        "Loft",
        "Oficina",
        "PH",
        "Quinta",
        "Terreno",
      ]),
    })),
    undefined,
  ]),
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  first: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  last: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  number: faker.helpers.randomize([faker.datatype.number(), undefined]),
  numberOfElements: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  pageable: faker.helpers.randomize([
    {
      offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageNumber: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageSize: faker.helpers.randomize([faker.datatype.number(), undefined]),
      paged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sort: faker.helpers.randomize([
        {
          empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
          sorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
        },
        undefined,
      ]),
      unpaged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  size: faker.helpers.randomize([faker.datatype.number(), undefined]),
  sort: faker.helpers.randomize([
    {
      empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  totalElements: faker.helpers.randomize([faker.datatype.number(), undefined]),
  totalPages: faker.helpers.randomize([faker.datatype.number(), undefined]),
});

export const getGetPropertyUsingGETMock = () => ({
  address: {
    department: faker.random.word(),
    id: (() => faker.datatype.uuid())(),
    number: faker.datatype.number(),
    postalCode: faker.random.word(),
    street: faker.random.word(),
    town: {
      city: {
        id: (() => faker.datatype.uuid())(),
        name: faker.random.word(),
        state: {
          country: {
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
          id: (() => faker.datatype.uuid())(),
          name: faker.random.word(),
        },
      },
      id: (() => faker.datatype.uuid())(),
      name: faker.random.word(),
    },
  },
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: {
          department: faker.random.word(),
          id: (() => faker.datatype.uuid())(),
          number: faker.datatype.number(),
          postalCode: faker.random.word(),
          street: faker.random.word(),
          town: {
            city: {
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            id: (() => faker.datatype.uuid())(),
            name: faker.random.word(),
          },
        },
        comments: faker.random.word(),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.datatype.number(),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.datatype.number(),
        creationDate: faker.date.recent(),
        environments: faker.datatype.number(),
        expenses: faker.datatype.number(),
        fullBaths: faker.datatype.number(),
        id: (() => faker.datatype.uuid())(),
        levels: faker.datatype.number(),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: {
                department: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                postalCode: faker.random.word(),
                street: faker.random.word(),
                town: {
                  city: {
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
              },
              comments: faker.random.word(),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.datatype.number(),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.datatype.number(),
              creationDate: faker.date.recent(),
              environments: faker.datatype.number(),
              expenses: faker.datatype.number(),
              fullBaths: faker.datatype.number(),
              id: (() => faker.datatype.uuid())(),
              levels: faker.datatype.number(),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              parkDescription: faker.random.word(),
              price: faker.datatype.number(),
              rooms: faker.datatype.number(),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.datatype.number(),
              style: {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              title: faker.random.word(),
              toilets: faker.datatype.number(),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        parkDescription: faker.random.word(),
        price: faker.datatype.number(),
        rooms: faker.datatype.number(),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.datatype.number(),
        style: {
          id: (() => faker.datatype.uuid())(),
          label: faker.random.word(),
        },
        title: faker.random.word(),
        toilets: faker.datatype.number(),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: (() => faker.lorem.sentences(5))(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.datatype.number(),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.datatype.number(),
  environments: faker.datatype.number(),
  expenses: faker.datatype.number(),
  fullBaths: faker.datatype.number(),
  id: (() => faker.datatype.uuid())(),
  levels: faker.datatype.number(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: (() => faker.lorem.sentences(3))(),
  price: faker.datatype.number(),
  rooms: faker.datatype.number(),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.datatype.number(),
  style: { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
  title: faker.random.word(),
  toilets: faker.datatype.number(),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getApiDocumentationMSW = () => [
  rest.post("*/auth/google-login", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getLoginWithGoogleUsingPOSTMock())
    );
  }),
  rest.post("*/auth/login", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getLoginUsingPOSTMock())
    );
  }),
  rest.post("*/auth/logout", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getLogOutUsingPOSTMock())
    );
  }),
  rest.get("*/auth/me", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetLoggedUsingGETMock())
    );
  }),
  rest.post("*/auth/register", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getRegisterUsingPOSTMock())
    );
  }),
  rest.get("*/auth/roles", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/cities/:stateId", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.put("*/dislike/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDislikePropertyUsingPUTMock())
    );
  }),
  rest.get("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingGETMock())
    );
  }),
  rest.head("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingHEADMock())
    );
  }),
  rest.post("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPOSTMock())
    );
  }),
  rest.put("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPUTMock())
    );
  }),
  rest.delete("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingDELETEMock())
    );
  }),
  rest.patch("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPATCHMock())
    );
  }),
  rest.put("*/like/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getLikePropertyUsingPUTMock())
    );
  }),
  rest.post("*/property/create", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getCreatePropertyUsingPOSTMock())
    );
  }),
  rest.get("*/property/favorites", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.put("*/property/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getEditPropertyUsingPUTMock())
    );
  }),
  rest.get("*/public/info/amenities", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/info/materials", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/info/securities", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/info/styles", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/info/types", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/property/preview", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPropertiesUsingGETMock())
    );
  }),
  rest.post("*/public/property/preview/by-filter", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPropertiesFilteredUsingPOSTMock())
    );
  }),
  rest.get("*/public/property/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPropertyUsingGETMock())
    );
  }),
  rest.get("*/states", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/towns/:cityId", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
];
