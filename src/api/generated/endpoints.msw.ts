/*
 * Generated by orval v5.4.8 🍺
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import { rest } from "msw";
import faker from "faker";

export const getLoginWithGoogleUsingPOSTMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getLoginUsingPOSTMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getLogOutUsingPOSTMock = () => ({});

export const getGetLoggedUsingGETMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getRegisterUsingPOSTMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getDislikePropertyUsingPUTMock = () => ({
  address: faker.helpers.randomize([
    {
      city: faker.helpers.randomize([faker.random.word(), undefined]),
      cityId: faker.helpers.randomize([faker.random.word(), undefined]),
      coordinates: {
        lat: faker.datatype.number(),
        long: faker.datatype.number(),
      },
      number: faker.datatype.number(),
      state: faker.helpers.randomize([faker.random.word(), undefined]),
      stateId: faker.helpers.randomize([faker.random.word(), undefined]),
      street: faker.random.word(),
    },
    undefined,
  ]),
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: faker.helpers.randomize([
          {
            city: {
              centroid: {},
              gid: (() => faker.datatype.uuid())(),
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                centroid: {},
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                gid: (() => faker.datatype.uuid())(),
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            coordinates: {
              id: (() => faker.datatype.uuid())(),
              lat: faker.datatype.number(),
              long: faker.datatype.number(),
            },
            id: (() => faker.datatype.uuid())(),
            number: faker.datatype.number(),
            street: faker.random.word(),
          },
          undefined,
        ]),
        comments: faker.helpers.randomize([faker.random.word(), undefined]),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        creationDate: faker.helpers.randomize([faker.date.recent(), undefined]),
        environments: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
        fullBaths: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        id: (() => faker.datatype.uuid())(),
        images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            fileData: faker.random.word(),
            fileName: faker.helpers.randomize([faker.random.word(), undefined]),
            fileType: faker.helpers.randomize([faker.random.word(), undefined]),
            id: (() => faker.datatype.uuid())(),
          })
        ),
        levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: faker.helpers.randomize([
                {
                  city: {
                    centroid: {},
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      centroid: {},
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      gid: (() => faker.datatype.uuid())(),
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  coordinates: {
                    id: (() => faker.datatype.uuid())(),
                    lat: faker.datatype.number(),
                    long: faker.datatype.number(),
                  },
                  id: (() => faker.datatype.uuid())(),
                  number: faker.datatype.number(),
                  street: faker.random.word(),
                },
                undefined,
              ]),
              comments: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              creationDate: faker.helpers.randomize([
                faker.date.recent(),
                undefined,
              ]),
              environments: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              expenses: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              fullBaths: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              id: (() => faker.datatype.uuid())(),
              images: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })),
              levels: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              owner: {
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              },
              parkDescription: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              price: faker.datatype.number(),
              rooms: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              step: faker.datatype.number(),
              style: faker.helpers.randomize([
                {
                  id: (() => faker.datatype.uuid())(),
                  label: faker.random.word(),
                },
                undefined,
              ]),
              title: faker.random.word(),
              toilets: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        owner: {
          birthDate: faker.helpers.randomize([faker.date.recent(), undefined]),
          email: (() => faker.internet.email())(),
          id: (() => faker.datatype.uuid())(),
          likedProperties: [
            ...Array(faker.datatype.number({ min: 1, max: 10 })),
          ].map(() => ({
            address: faker.helpers.randomize([
              {
                city: {
                  centroid: {},
                  gid: (() => faker.datatype.uuid())(),
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                  state: {
                    centroid: {},
                    country: {
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                  },
                },
                coordinates: {
                  id: (() => faker.datatype.uuid())(),
                  lat: faker.datatype.number(),
                  long: faker.datatype.number(),
                },
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                street: faker.random.word(),
              },
              undefined,
            ]),
            comments: faker.helpers.randomize([faker.random.word(), undefined]),
            condition: faker.helpers.randomize(["RENT", "SALE"]),
            constructionDate: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            contacts: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              email: (() => faker.internet.email())(),
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            coveredSquareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            creationDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            environments: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            expenses: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            fullBaths: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            id: (() => faker.datatype.uuid())(),
            images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })
            ),
            levels: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              })
            ),
            links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => faker.random.word()
            ),
            materials: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            openHouse: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              day: faker.date.recent(),
              finalTime: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              initialTime: faker.random.word(),
            })),
            parkDescription: faker.helpers.randomize([
              faker.random.word(),
              undefined,
            ]),
            price: faker.datatype.number(),
            rooms: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            security: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            squareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            step: faker.datatype.number(),
            style: faker.helpers.randomize([
              {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              undefined,
            ]),
            title: faker.random.word(),
            toilets: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            type: faker.helpers.randomize([
              "Casa",
              "Cochera",
              "Compartido",
              "Consultorio",
              "Country",
              "Departamento",
              "Edificio",
              "Flat",
              "Galpon",
              "Hotel",
              "Local",
              "Loft",
              "Oficina",
              "PH",
              "Quinta",
              "Terreno",
            ]),
          })),
          password: faker.helpers.randomize([faker.random.word(), undefined]),
          userName: faker.random.word(),
          userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
          userRole: {
            active: faker.datatype.boolean(),
            creationDate: faker.date.recent(),
            description: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            permissions: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              slug: faker.random.word(),
              title: faker.random.word(),
              userRoles: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
              })),
            })),
            slug: faker.random.word(),
            title: faker.random.word(),
          },
        },
        parkDescription: faker.helpers.randomize([
          faker.random.word(),
          undefined,
        ]),
        price: faker.datatype.number(),
        rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        step: faker.datatype.number(),
        style: faker.helpers.randomize([
          { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
          undefined,
        ]),
        title: faker.random.word(),
        toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  environments: faker.helpers.randomize([faker.datatype.number(), undefined]),
  expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
  fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
  id: (() => faker.datatype.uuid())(),
  images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
  liked: faker.datatype.boolean(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.helpers.randomize([faker.random.word(), undefined]),
  price: faker.datatype.number(),
  rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
  step: faker.datatype.number(),
  style: faker.helpers.randomize([
    { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
    undefined,
  ]),
  title: faker.random.word(),
  toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getErrorHtmlUsingGETMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      cksysrxdx00001spb2l330pxp: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingHEADMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      cksysrxdz00011spb927b79c3: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPOSTMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      cksysrxe000021spbbmzdakuh: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPUTMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      cksysrxe100031spbatq688qg: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingDELETEMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      cksysrxe200041spb33ndar09: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getErrorHtmlUsingPATCHMock = () => ({
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  model: faker.helpers.randomize([{}, undefined]),
  modelMap: faker.helpers.randomize([
    {
      cksysrxe300051spbhkm1cpo5: {},
    },
    undefined,
  ]),
  reference: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  status: faker.helpers.randomize([
    faker.helpers.randomize([
      "ACCEPTED",
      "ALREADY_REPORTED",
      "BAD_GATEWAY",
      "BAD_REQUEST",
      "BANDWIDTH_LIMIT_EXCEEDED",
      "CHECKPOINT",
      "CONFLICT",
      "CONTINUE",
      "CREATED",
      "DESTINATION_LOCKED",
      "EXPECTATION_FAILED",
      "FAILED_DEPENDENCY",
      "FORBIDDEN",
      "FOUND",
      "GATEWAY_TIMEOUT",
      "GONE",
      "HTTP_VERSION_NOT_SUPPORTED",
      "IM_USED",
      "INSUFFICIENT_SPACE_ON_RESOURCE",
      "INSUFFICIENT_STORAGE",
      "INTERNAL_SERVER_ERROR",
      "I_AM_A_TEAPOT",
      "LENGTH_REQUIRED",
      "LOCKED",
      "LOOP_DETECTED",
      "METHOD_FAILURE",
      "METHOD_NOT_ALLOWED",
      "MOVED_PERMANENTLY",
      "MOVED_TEMPORARILY",
      "MULTIPLE_CHOICES",
      "MULTI_STATUS",
      "NETWORK_AUTHENTICATION_REQUIRED",
      "NON_AUTHORITATIVE_INFORMATION",
      "NOT_ACCEPTABLE",
      "NOT_EXTENDED",
      "NOT_FOUND",
      "NOT_IMPLEMENTED",
      "NOT_MODIFIED",
      "NO_CONTENT",
      "OK",
      "PARTIAL_CONTENT",
      "PAYLOAD_TOO_LARGE",
      "PAYMENT_REQUIRED",
      "PERMANENT_REDIRECT",
      "PRECONDITION_FAILED",
      "PRECONDITION_REQUIRED",
      "PROCESSING",
      "PROXY_AUTHENTICATION_REQUIRED",
      "REQUESTED_RANGE_NOT_SATISFIABLE",
      "REQUEST_ENTITY_TOO_LARGE",
      "REQUEST_HEADER_FIELDS_TOO_LARGE",
      "REQUEST_TIMEOUT",
      "REQUEST_URI_TOO_LONG",
      "RESET_CONTENT",
      "SEE_OTHER",
      "SERVICE_UNAVAILABLE",
      "SWITCHING_PROTOCOLS",
      "TEMPORARY_REDIRECT",
      "TOO_EARLY",
      "TOO_MANY_REQUESTS",
      "UNAUTHORIZED",
      "UNAVAILABLE_FOR_LEGAL_REASONS",
      "UNPROCESSABLE_ENTITY",
      "UNSUPPORTED_MEDIA_TYPE",
      "UPGRADE_REQUIRED",
      "URI_TOO_LONG",
      "USE_PROXY",
      "VARIANT_ALSO_NEGOTIATES",
    ]),
    undefined,
  ]),
  view: faker.helpers.randomize([
    { contentType: faker.helpers.randomize([faker.random.word(), undefined]) },
    undefined,
  ]),
  viewName: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getLikePropertyUsingPUTMock = () => ({
  address: faker.helpers.randomize([
    {
      city: faker.helpers.randomize([faker.random.word(), undefined]),
      cityId: faker.helpers.randomize([faker.random.word(), undefined]),
      coordinates: {
        lat: faker.datatype.number(),
        long: faker.datatype.number(),
      },
      number: faker.datatype.number(),
      state: faker.helpers.randomize([faker.random.word(), undefined]),
      stateId: faker.helpers.randomize([faker.random.word(), undefined]),
      street: faker.random.word(),
    },
    undefined,
  ]),
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: faker.helpers.randomize([
          {
            city: {
              centroid: {},
              gid: (() => faker.datatype.uuid())(),
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                centroid: {},
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                gid: (() => faker.datatype.uuid())(),
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            coordinates: {
              id: (() => faker.datatype.uuid())(),
              lat: faker.datatype.number(),
              long: faker.datatype.number(),
            },
            id: (() => faker.datatype.uuid())(),
            number: faker.datatype.number(),
            street: faker.random.word(),
          },
          undefined,
        ]),
        comments: faker.helpers.randomize([faker.random.word(), undefined]),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        creationDate: faker.helpers.randomize([faker.date.recent(), undefined]),
        environments: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
        fullBaths: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        id: (() => faker.datatype.uuid())(),
        images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            fileData: faker.random.word(),
            fileName: faker.helpers.randomize([faker.random.word(), undefined]),
            fileType: faker.helpers.randomize([faker.random.word(), undefined]),
            id: (() => faker.datatype.uuid())(),
          })
        ),
        levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: faker.helpers.randomize([
                {
                  city: {
                    centroid: {},
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      centroid: {},
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      gid: (() => faker.datatype.uuid())(),
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  coordinates: {
                    id: (() => faker.datatype.uuid())(),
                    lat: faker.datatype.number(),
                    long: faker.datatype.number(),
                  },
                  id: (() => faker.datatype.uuid())(),
                  number: faker.datatype.number(),
                  street: faker.random.word(),
                },
                undefined,
              ]),
              comments: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              creationDate: faker.helpers.randomize([
                faker.date.recent(),
                undefined,
              ]),
              environments: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              expenses: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              fullBaths: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              id: (() => faker.datatype.uuid())(),
              images: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })),
              levels: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              owner: {
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              },
              parkDescription: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              price: faker.datatype.number(),
              rooms: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              step: faker.datatype.number(),
              style: faker.helpers.randomize([
                {
                  id: (() => faker.datatype.uuid())(),
                  label: faker.random.word(),
                },
                undefined,
              ]),
              title: faker.random.word(),
              toilets: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        owner: {
          birthDate: faker.helpers.randomize([faker.date.recent(), undefined]),
          email: (() => faker.internet.email())(),
          id: (() => faker.datatype.uuid())(),
          likedProperties: [
            ...Array(faker.datatype.number({ min: 1, max: 10 })),
          ].map(() => ({
            address: faker.helpers.randomize([
              {
                city: {
                  centroid: {},
                  gid: (() => faker.datatype.uuid())(),
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                  state: {
                    centroid: {},
                    country: {
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                  },
                },
                coordinates: {
                  id: (() => faker.datatype.uuid())(),
                  lat: faker.datatype.number(),
                  long: faker.datatype.number(),
                },
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                street: faker.random.word(),
              },
              undefined,
            ]),
            comments: faker.helpers.randomize([faker.random.word(), undefined]),
            condition: faker.helpers.randomize(["RENT", "SALE"]),
            constructionDate: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            contacts: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              email: (() => faker.internet.email())(),
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            coveredSquareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            creationDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            environments: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            expenses: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            fullBaths: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            id: (() => faker.datatype.uuid())(),
            images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })
            ),
            levels: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              })
            ),
            links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => faker.random.word()
            ),
            materials: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            openHouse: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              day: faker.date.recent(),
              finalTime: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              initialTime: faker.random.word(),
            })),
            parkDescription: faker.helpers.randomize([
              faker.random.word(),
              undefined,
            ]),
            price: faker.datatype.number(),
            rooms: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            security: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            squareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            step: faker.datatype.number(),
            style: faker.helpers.randomize([
              {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              undefined,
            ]),
            title: faker.random.word(),
            toilets: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            type: faker.helpers.randomize([
              "Casa",
              "Cochera",
              "Compartido",
              "Consultorio",
              "Country",
              "Departamento",
              "Edificio",
              "Flat",
              "Galpon",
              "Hotel",
              "Local",
              "Loft",
              "Oficina",
              "PH",
              "Quinta",
              "Terreno",
            ]),
          })),
          password: faker.helpers.randomize([faker.random.word(), undefined]),
          userName: faker.random.word(),
          userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
          userRole: {
            active: faker.datatype.boolean(),
            creationDate: faker.date.recent(),
            description: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            permissions: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              slug: faker.random.word(),
              title: faker.random.word(),
              userRoles: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
              })),
            })),
            slug: faker.random.word(),
            title: faker.random.word(),
          },
        },
        parkDescription: faker.helpers.randomize([
          faker.random.word(),
          undefined,
        ]),
        price: faker.datatype.number(),
        rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        step: faker.datatype.number(),
        style: faker.helpers.randomize([
          { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
          undefined,
        ]),
        title: faker.random.word(),
        toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  environments: faker.helpers.randomize([faker.datatype.number(), undefined]),
  expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
  fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
  id: (() => faker.datatype.uuid())(),
  images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
  liked: faker.datatype.boolean(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.helpers.randomize([faker.random.word(), undefined]),
  price: faker.datatype.number(),
  rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
  step: faker.datatype.number(),
  style: faker.helpers.randomize([
    { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
    undefined,
  ]),
  title: faker.random.word(),
  toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getCreatePropertyUsingPOSTMock = () => ({
  address: faker.helpers.randomize([
    {
      city: faker.helpers.randomize([faker.random.word(), undefined]),
      cityId: faker.helpers.randomize([faker.random.word(), undefined]),
      coordinates: {
        lat: faker.datatype.number(),
        long: faker.datatype.number(),
      },
      number: faker.datatype.number(),
      state: faker.helpers.randomize([faker.random.word(), undefined]),
      stateId: faker.helpers.randomize([faker.random.word(), undefined]),
      street: faker.random.word(),
    },
    undefined,
  ]),
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: faker.helpers.randomize([
          {
            city: {
              centroid: {},
              gid: (() => faker.datatype.uuid())(),
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                centroid: {},
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                gid: (() => faker.datatype.uuid())(),
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            coordinates: {
              id: (() => faker.datatype.uuid())(),
              lat: faker.datatype.number(),
              long: faker.datatype.number(),
            },
            id: (() => faker.datatype.uuid())(),
            number: faker.datatype.number(),
            street: faker.random.word(),
          },
          undefined,
        ]),
        comments: faker.helpers.randomize([faker.random.word(), undefined]),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        creationDate: faker.helpers.randomize([faker.date.recent(), undefined]),
        environments: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
        fullBaths: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        id: (() => faker.datatype.uuid())(),
        images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            fileData: faker.random.word(),
            fileName: faker.helpers.randomize([faker.random.word(), undefined]),
            fileType: faker.helpers.randomize([faker.random.word(), undefined]),
            id: (() => faker.datatype.uuid())(),
          })
        ),
        levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: faker.helpers.randomize([
                {
                  city: {
                    centroid: {},
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      centroid: {},
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      gid: (() => faker.datatype.uuid())(),
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  coordinates: {
                    id: (() => faker.datatype.uuid())(),
                    lat: faker.datatype.number(),
                    long: faker.datatype.number(),
                  },
                  id: (() => faker.datatype.uuid())(),
                  number: faker.datatype.number(),
                  street: faker.random.word(),
                },
                undefined,
              ]),
              comments: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              creationDate: faker.helpers.randomize([
                faker.date.recent(),
                undefined,
              ]),
              environments: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              expenses: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              fullBaths: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              id: (() => faker.datatype.uuid())(),
              images: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })),
              levels: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              owner: {
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              },
              parkDescription: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              price: faker.datatype.number(),
              rooms: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              step: faker.datatype.number(),
              style: faker.helpers.randomize([
                {
                  id: (() => faker.datatype.uuid())(),
                  label: faker.random.word(),
                },
                undefined,
              ]),
              title: faker.random.word(),
              toilets: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        owner: {
          birthDate: faker.helpers.randomize([faker.date.recent(), undefined]),
          email: (() => faker.internet.email())(),
          id: (() => faker.datatype.uuid())(),
          likedProperties: [
            ...Array(faker.datatype.number({ min: 1, max: 10 })),
          ].map(() => ({
            address: faker.helpers.randomize([
              {
                city: {
                  centroid: {},
                  gid: (() => faker.datatype.uuid())(),
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                  state: {
                    centroid: {},
                    country: {
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                  },
                },
                coordinates: {
                  id: (() => faker.datatype.uuid())(),
                  lat: faker.datatype.number(),
                  long: faker.datatype.number(),
                },
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                street: faker.random.word(),
              },
              undefined,
            ]),
            comments: faker.helpers.randomize([faker.random.word(), undefined]),
            condition: faker.helpers.randomize(["RENT", "SALE"]),
            constructionDate: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            contacts: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              email: (() => faker.internet.email())(),
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            coveredSquareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            creationDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            environments: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            expenses: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            fullBaths: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            id: (() => faker.datatype.uuid())(),
            images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })
            ),
            levels: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              })
            ),
            links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => faker.random.word()
            ),
            materials: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            openHouse: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              day: faker.date.recent(),
              finalTime: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              initialTime: faker.random.word(),
            })),
            parkDescription: faker.helpers.randomize([
              faker.random.word(),
              undefined,
            ]),
            price: faker.datatype.number(),
            rooms: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            security: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            squareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            step: faker.datatype.number(),
            style: faker.helpers.randomize([
              {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              undefined,
            ]),
            title: faker.random.word(),
            toilets: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            type: faker.helpers.randomize([
              "Casa",
              "Cochera",
              "Compartido",
              "Consultorio",
              "Country",
              "Departamento",
              "Edificio",
              "Flat",
              "Galpon",
              "Hotel",
              "Local",
              "Loft",
              "Oficina",
              "PH",
              "Quinta",
              "Terreno",
            ]),
          })),
          password: faker.helpers.randomize([faker.random.word(), undefined]),
          userName: faker.random.word(),
          userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
          userRole: {
            active: faker.datatype.boolean(),
            creationDate: faker.date.recent(),
            description: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            permissions: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              slug: faker.random.word(),
              title: faker.random.word(),
              userRoles: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
              })),
            })),
            slug: faker.random.word(),
            title: faker.random.word(),
          },
        },
        parkDescription: faker.helpers.randomize([
          faker.random.word(),
          undefined,
        ]),
        price: faker.datatype.number(),
        rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        step: faker.datatype.number(),
        style: faker.helpers.randomize([
          { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
          undefined,
        ]),
        title: faker.random.word(),
        toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  environments: faker.helpers.randomize([faker.datatype.number(), undefined]),
  expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
  fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
  id: (() => faker.datatype.uuid())(),
  images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
  liked: faker.datatype.boolean(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.helpers.randomize([faker.random.word(), undefined]),
  price: faker.datatype.number(),
  rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
  step: faker.datatype.number(),
  style: faker.helpers.randomize([
    { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
    undefined,
  ]),
  title: faker.random.word(),
  toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getCreatePropertyWithImagesUsingPOSTMock = () => ({
  address: faker.helpers.randomize([
    {
      city: faker.helpers.randomize([faker.random.word(), undefined]),
      cityId: faker.helpers.randomize([faker.random.word(), undefined]),
      coordinates: {
        lat: faker.datatype.number(),
        long: faker.datatype.number(),
      },
      number: faker.datatype.number(),
      state: faker.helpers.randomize([faker.random.word(), undefined]),
      stateId: faker.helpers.randomize([faker.random.word(), undefined]),
      street: faker.random.word(),
    },
    undefined,
  ]),
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: faker.helpers.randomize([
          {
            city: {
              centroid: {},
              gid: (() => faker.datatype.uuid())(),
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                centroid: {},
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                gid: (() => faker.datatype.uuid())(),
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            coordinates: {
              id: (() => faker.datatype.uuid())(),
              lat: faker.datatype.number(),
              long: faker.datatype.number(),
            },
            id: (() => faker.datatype.uuid())(),
            number: faker.datatype.number(),
            street: faker.random.word(),
          },
          undefined,
        ]),
        comments: faker.helpers.randomize([faker.random.word(), undefined]),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        creationDate: faker.helpers.randomize([faker.date.recent(), undefined]),
        environments: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
        fullBaths: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        id: (() => faker.datatype.uuid())(),
        images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            fileData: faker.random.word(),
            fileName: faker.helpers.randomize([faker.random.word(), undefined]),
            fileType: faker.helpers.randomize([faker.random.word(), undefined]),
            id: (() => faker.datatype.uuid())(),
          })
        ),
        levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: faker.helpers.randomize([
                {
                  city: {
                    centroid: {},
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      centroid: {},
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      gid: (() => faker.datatype.uuid())(),
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  coordinates: {
                    id: (() => faker.datatype.uuid())(),
                    lat: faker.datatype.number(),
                    long: faker.datatype.number(),
                  },
                  id: (() => faker.datatype.uuid())(),
                  number: faker.datatype.number(),
                  street: faker.random.word(),
                },
                undefined,
              ]),
              comments: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              creationDate: faker.helpers.randomize([
                faker.date.recent(),
                undefined,
              ]),
              environments: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              expenses: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              fullBaths: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              id: (() => faker.datatype.uuid())(),
              images: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })),
              levels: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              owner: {
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              },
              parkDescription: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              price: faker.datatype.number(),
              rooms: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              step: faker.datatype.number(),
              style: faker.helpers.randomize([
                {
                  id: (() => faker.datatype.uuid())(),
                  label: faker.random.word(),
                },
                undefined,
              ]),
              title: faker.random.word(),
              toilets: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        owner: {
          birthDate: faker.helpers.randomize([faker.date.recent(), undefined]),
          email: (() => faker.internet.email())(),
          id: (() => faker.datatype.uuid())(),
          likedProperties: [
            ...Array(faker.datatype.number({ min: 1, max: 10 })),
          ].map(() => ({
            address: faker.helpers.randomize([
              {
                city: {
                  centroid: {},
                  gid: (() => faker.datatype.uuid())(),
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                  state: {
                    centroid: {},
                    country: {
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                  },
                },
                coordinates: {
                  id: (() => faker.datatype.uuid())(),
                  lat: faker.datatype.number(),
                  long: faker.datatype.number(),
                },
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                street: faker.random.word(),
              },
              undefined,
            ]),
            comments: faker.helpers.randomize([faker.random.word(), undefined]),
            condition: faker.helpers.randomize(["RENT", "SALE"]),
            constructionDate: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            contacts: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              email: (() => faker.internet.email())(),
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            coveredSquareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            creationDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            environments: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            expenses: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            fullBaths: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            id: (() => faker.datatype.uuid())(),
            images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })
            ),
            levels: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              })
            ),
            links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => faker.random.word()
            ),
            materials: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            openHouse: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              day: faker.date.recent(),
              finalTime: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              initialTime: faker.random.word(),
            })),
            parkDescription: faker.helpers.randomize([
              faker.random.word(),
              undefined,
            ]),
            price: faker.datatype.number(),
            rooms: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            security: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            squareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            step: faker.datatype.number(),
            style: faker.helpers.randomize([
              {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              undefined,
            ]),
            title: faker.random.word(),
            toilets: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            type: faker.helpers.randomize([
              "Casa",
              "Cochera",
              "Compartido",
              "Consultorio",
              "Country",
              "Departamento",
              "Edificio",
              "Flat",
              "Galpon",
              "Hotel",
              "Local",
              "Loft",
              "Oficina",
              "PH",
              "Quinta",
              "Terreno",
            ]),
          })),
          password: faker.helpers.randomize([faker.random.word(), undefined]),
          userName: faker.random.word(),
          userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
          userRole: {
            active: faker.datatype.boolean(),
            creationDate: faker.date.recent(),
            description: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            permissions: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              slug: faker.random.word(),
              title: faker.random.word(),
              userRoles: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
              })),
            })),
            slug: faker.random.word(),
            title: faker.random.word(),
          },
        },
        parkDescription: faker.helpers.randomize([
          faker.random.word(),
          undefined,
        ]),
        price: faker.datatype.number(),
        rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        step: faker.datatype.number(),
        style: faker.helpers.randomize([
          { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
          undefined,
        ]),
        title: faker.random.word(),
        toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  environments: faker.helpers.randomize([faker.datatype.number(), undefined]),
  expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
  fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
  id: (() => faker.datatype.uuid())(),
  images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
  liked: faker.datatype.boolean(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.helpers.randomize([faker.random.word(), undefined]),
  price: faker.datatype.number(),
  rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
  step: faker.datatype.number(),
  style: faker.helpers.randomize([
    { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
    undefined,
  ]),
  title: faker.random.word(),
  toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getEditPropertyWithImagesUsingPUTMock = () => ({
  address: faker.helpers.randomize([
    {
      city: faker.helpers.randomize([faker.random.word(), undefined]),
      cityId: faker.helpers.randomize([faker.random.word(), undefined]),
      coordinates: {
        lat: faker.datatype.number(),
        long: faker.datatype.number(),
      },
      number: faker.datatype.number(),
      state: faker.helpers.randomize([faker.random.word(), undefined]),
      stateId: faker.helpers.randomize([faker.random.word(), undefined]),
      street: faker.random.word(),
    },
    undefined,
  ]),
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: faker.helpers.randomize([
          {
            city: {
              centroid: {},
              gid: (() => faker.datatype.uuid())(),
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                centroid: {},
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                gid: (() => faker.datatype.uuid())(),
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            coordinates: {
              id: (() => faker.datatype.uuid())(),
              lat: faker.datatype.number(),
              long: faker.datatype.number(),
            },
            id: (() => faker.datatype.uuid())(),
            number: faker.datatype.number(),
            street: faker.random.word(),
          },
          undefined,
        ]),
        comments: faker.helpers.randomize([faker.random.word(), undefined]),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        creationDate: faker.helpers.randomize([faker.date.recent(), undefined]),
        environments: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
        fullBaths: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        id: (() => faker.datatype.uuid())(),
        images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            fileData: faker.random.word(),
            fileName: faker.helpers.randomize([faker.random.word(), undefined]),
            fileType: faker.helpers.randomize([faker.random.word(), undefined]),
            id: (() => faker.datatype.uuid())(),
          })
        ),
        levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: faker.helpers.randomize([
                {
                  city: {
                    centroid: {},
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      centroid: {},
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      gid: (() => faker.datatype.uuid())(),
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  coordinates: {
                    id: (() => faker.datatype.uuid())(),
                    lat: faker.datatype.number(),
                    long: faker.datatype.number(),
                  },
                  id: (() => faker.datatype.uuid())(),
                  number: faker.datatype.number(),
                  street: faker.random.word(),
                },
                undefined,
              ]),
              comments: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              creationDate: faker.helpers.randomize([
                faker.date.recent(),
                undefined,
              ]),
              environments: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              expenses: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              fullBaths: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              id: (() => faker.datatype.uuid())(),
              images: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })),
              levels: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              owner: {
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              },
              parkDescription: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              price: faker.datatype.number(),
              rooms: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              step: faker.datatype.number(),
              style: faker.helpers.randomize([
                {
                  id: (() => faker.datatype.uuid())(),
                  label: faker.random.word(),
                },
                undefined,
              ]),
              title: faker.random.word(),
              toilets: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        owner: {
          birthDate: faker.helpers.randomize([faker.date.recent(), undefined]),
          email: (() => faker.internet.email())(),
          id: (() => faker.datatype.uuid())(),
          likedProperties: [
            ...Array(faker.datatype.number({ min: 1, max: 10 })),
          ].map(() => ({
            address: faker.helpers.randomize([
              {
                city: {
                  centroid: {},
                  gid: (() => faker.datatype.uuid())(),
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                  state: {
                    centroid: {},
                    country: {
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                  },
                },
                coordinates: {
                  id: (() => faker.datatype.uuid())(),
                  lat: faker.datatype.number(),
                  long: faker.datatype.number(),
                },
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                street: faker.random.word(),
              },
              undefined,
            ]),
            comments: faker.helpers.randomize([faker.random.word(), undefined]),
            condition: faker.helpers.randomize(["RENT", "SALE"]),
            constructionDate: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            contacts: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              email: (() => faker.internet.email())(),
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            coveredSquareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            creationDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            environments: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            expenses: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            fullBaths: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            id: (() => faker.datatype.uuid())(),
            images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })
            ),
            levels: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              })
            ),
            links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => faker.random.word()
            ),
            materials: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            openHouse: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              day: faker.date.recent(),
              finalTime: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              initialTime: faker.random.word(),
            })),
            parkDescription: faker.helpers.randomize([
              faker.random.word(),
              undefined,
            ]),
            price: faker.datatype.number(),
            rooms: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            security: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            squareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            step: faker.datatype.number(),
            style: faker.helpers.randomize([
              {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              undefined,
            ]),
            title: faker.random.word(),
            toilets: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            type: faker.helpers.randomize([
              "Casa",
              "Cochera",
              "Compartido",
              "Consultorio",
              "Country",
              "Departamento",
              "Edificio",
              "Flat",
              "Galpon",
              "Hotel",
              "Local",
              "Loft",
              "Oficina",
              "PH",
              "Quinta",
              "Terreno",
            ]),
          })),
          password: faker.helpers.randomize([faker.random.word(), undefined]),
          userName: faker.random.word(),
          userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
          userRole: {
            active: faker.datatype.boolean(),
            creationDate: faker.date.recent(),
            description: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            permissions: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              slug: faker.random.word(),
              title: faker.random.word(),
              userRoles: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
              })),
            })),
            slug: faker.random.word(),
            title: faker.random.word(),
          },
        },
        parkDescription: faker.helpers.randomize([
          faker.random.word(),
          undefined,
        ]),
        price: faker.datatype.number(),
        rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        step: faker.datatype.number(),
        style: faker.helpers.randomize([
          { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
          undefined,
        ]),
        title: faker.random.word(),
        toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  environments: faker.helpers.randomize([faker.datatype.number(), undefined]),
  expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
  fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
  id: (() => faker.datatype.uuid())(),
  images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
  liked: faker.datatype.boolean(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.helpers.randomize([faker.random.word(), undefined]),
  price: faker.datatype.number(),
  rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
  step: faker.datatype.number(),
  style: faker.helpers.randomize([
    { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
    undefined,
  ]),
  title: faker.random.word(),
  toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getEditPropertyUsingPUTMock = () => ({
  address: faker.helpers.randomize([
    {
      city: faker.helpers.randomize([faker.random.word(), undefined]),
      cityId: faker.helpers.randomize([faker.random.word(), undefined]),
      coordinates: {
        lat: faker.datatype.number(),
        long: faker.datatype.number(),
      },
      number: faker.datatype.number(),
      state: faker.helpers.randomize([faker.random.word(), undefined]),
      stateId: faker.helpers.randomize([faker.random.word(), undefined]),
      street: faker.random.word(),
    },
    undefined,
  ]),
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: faker.helpers.randomize([
          {
            city: {
              centroid: {},
              gid: (() => faker.datatype.uuid())(),
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                centroid: {},
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                gid: (() => faker.datatype.uuid())(),
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            coordinates: {
              id: (() => faker.datatype.uuid())(),
              lat: faker.datatype.number(),
              long: faker.datatype.number(),
            },
            id: (() => faker.datatype.uuid())(),
            number: faker.datatype.number(),
            street: faker.random.word(),
          },
          undefined,
        ]),
        comments: faker.helpers.randomize([faker.random.word(), undefined]),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        creationDate: faker.helpers.randomize([faker.date.recent(), undefined]),
        environments: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
        fullBaths: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        id: (() => faker.datatype.uuid())(),
        images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            fileData: faker.random.word(),
            fileName: faker.helpers.randomize([faker.random.word(), undefined]),
            fileType: faker.helpers.randomize([faker.random.word(), undefined]),
            id: (() => faker.datatype.uuid())(),
          })
        ),
        levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: faker.helpers.randomize([
                {
                  city: {
                    centroid: {},
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      centroid: {},
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      gid: (() => faker.datatype.uuid())(),
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  coordinates: {
                    id: (() => faker.datatype.uuid())(),
                    lat: faker.datatype.number(),
                    long: faker.datatype.number(),
                  },
                  id: (() => faker.datatype.uuid())(),
                  number: faker.datatype.number(),
                  street: faker.random.word(),
                },
                undefined,
              ]),
              comments: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              creationDate: faker.helpers.randomize([
                faker.date.recent(),
                undefined,
              ]),
              environments: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              expenses: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              fullBaths: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              id: (() => faker.datatype.uuid())(),
              images: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })),
              levels: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              owner: {
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              },
              parkDescription: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              price: faker.datatype.number(),
              rooms: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              step: faker.datatype.number(),
              style: faker.helpers.randomize([
                {
                  id: (() => faker.datatype.uuid())(),
                  label: faker.random.word(),
                },
                undefined,
              ]),
              title: faker.random.word(),
              toilets: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        owner: {
          birthDate: faker.helpers.randomize([faker.date.recent(), undefined]),
          email: (() => faker.internet.email())(),
          id: (() => faker.datatype.uuid())(),
          likedProperties: [
            ...Array(faker.datatype.number({ min: 1, max: 10 })),
          ].map(() => ({
            address: faker.helpers.randomize([
              {
                city: {
                  centroid: {},
                  gid: (() => faker.datatype.uuid())(),
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                  state: {
                    centroid: {},
                    country: {
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                  },
                },
                coordinates: {
                  id: (() => faker.datatype.uuid())(),
                  lat: faker.datatype.number(),
                  long: faker.datatype.number(),
                },
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                street: faker.random.word(),
              },
              undefined,
            ]),
            comments: faker.helpers.randomize([faker.random.word(), undefined]),
            condition: faker.helpers.randomize(["RENT", "SALE"]),
            constructionDate: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            contacts: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              email: (() => faker.internet.email())(),
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            coveredSquareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            creationDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            environments: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            expenses: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            fullBaths: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            id: (() => faker.datatype.uuid())(),
            images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })
            ),
            levels: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              })
            ),
            links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => faker.random.word()
            ),
            materials: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            openHouse: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              day: faker.date.recent(),
              finalTime: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              initialTime: faker.random.word(),
            })),
            parkDescription: faker.helpers.randomize([
              faker.random.word(),
              undefined,
            ]),
            price: faker.datatype.number(),
            rooms: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            security: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            squareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            step: faker.datatype.number(),
            style: faker.helpers.randomize([
              {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              undefined,
            ]),
            title: faker.random.word(),
            toilets: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            type: faker.helpers.randomize([
              "Casa",
              "Cochera",
              "Compartido",
              "Consultorio",
              "Country",
              "Departamento",
              "Edificio",
              "Flat",
              "Galpon",
              "Hotel",
              "Local",
              "Loft",
              "Oficina",
              "PH",
              "Quinta",
              "Terreno",
            ]),
          })),
          password: faker.helpers.randomize([faker.random.word(), undefined]),
          userName: faker.random.word(),
          userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
          userRole: {
            active: faker.datatype.boolean(),
            creationDate: faker.date.recent(),
            description: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            permissions: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              slug: faker.random.word(),
              title: faker.random.word(),
              userRoles: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
              })),
            })),
            slug: faker.random.word(),
            title: faker.random.word(),
          },
        },
        parkDescription: faker.helpers.randomize([
          faker.random.word(),
          undefined,
        ]),
        price: faker.datatype.number(),
        rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        step: faker.datatype.number(),
        style: faker.helpers.randomize([
          { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
          undefined,
        ]),
        title: faker.random.word(),
        toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: faker.random.word(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  environments: faker.helpers.randomize([faker.datatype.number(), undefined]),
  expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
  fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
  id: (() => faker.datatype.uuid())(),
  images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
  liked: faker.datatype.boolean(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: faker.helpers.randomize([faker.random.word(), undefined]),
  price: faker.datatype.number(),
  rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
  step: faker.datatype.number(),
  style: faker.helpers.randomize([
    { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
    undefined,
  ]),
  title: faker.random.word(),
  toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getGetCitiesUsingGETMock = () => ({
  content: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
      id: (() => faker.datatype.uuid())(),
      name: faker.random.word(),
    })),
    undefined,
  ]),
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  first: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  last: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  number: faker.helpers.randomize([faker.datatype.number(), undefined]),
  numberOfElements: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  pageable: faker.helpers.randomize([
    {
      offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageNumber: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageSize: faker.helpers.randomize([faker.datatype.number(), undefined]),
      paged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sort: faker.helpers.randomize([
        {
          empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
          sorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
        },
        undefined,
      ]),
      unpaged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  size: faker.helpers.randomize([faker.datatype.number(), undefined]),
  sort: faker.helpers.randomize([
    {
      empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  totalElements: faker.helpers.randomize([faker.datatype.number(), undefined]),
  totalPages: faker.helpers.randomize([faker.datatype.number(), undefined]),
});

export const getGetImageUsingGETMock = () => ({
  description: faker.helpers.randomize([faker.random.word(), undefined]),
  file: faker.helpers.randomize([faker.random.word(), undefined]),
  filename: faker.helpers.randomize([faker.random.word(), undefined]),
  inputStream: faker.helpers.randomize([{}, undefined]),
  open: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  readable: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  uri: faker.helpers.randomize([faker.random.word(), undefined]),
  url: faker.helpers.randomize([faker.internet.url(), undefined]),
});

export const getGetPropertiesUsingGETMock = () => ({
  content: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
      address: faker.helpers.randomize([
        {
          city: faker.helpers.randomize([faker.random.word(), undefined]),
          cityId: faker.helpers.randomize([faker.random.word(), undefined]),
          coordinates: {
            lat: faker.datatype.number(),
            long: faker.datatype.number(),
          },
          number: faker.datatype.number(),
          state: faker.helpers.randomize([faker.random.word(), undefined]),
          stateId: faker.helpers.randomize([faker.random.word(), undefined]),
          street: faker.random.word(),
        },
        undefined,
      ]),
      condition: faker.helpers.randomize(["RENT", "SALE"]),
      coveredSquareFoot: faker.helpers.randomize([
        faker.datatype.number(),
        undefined,
      ]),
      fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
      id: (() => faker.datatype.uuid())(),
      price: faker.datatype.number(),
      rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
      squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
      title: faker.random.word(),
      toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
      type: faker.helpers.randomize([
        "Casa",
        "Cochera",
        "Compartido",
        "Consultorio",
        "Country",
        "Departamento",
        "Edificio",
        "Flat",
        "Galpon",
        "Hotel",
        "Local",
        "Loft",
        "Oficina",
        "PH",
        "Quinta",
        "Terreno",
      ]),
    })),
    undefined,
  ]),
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  first: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  last: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  number: faker.helpers.randomize([faker.datatype.number(), undefined]),
  numberOfElements: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  pageable: faker.helpers.randomize([
    {
      offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageNumber: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageSize: faker.helpers.randomize([faker.datatype.number(), undefined]),
      paged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sort: faker.helpers.randomize([
        {
          empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
          sorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
        },
        undefined,
      ]),
      unpaged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  size: faker.helpers.randomize([faker.datatype.number(), undefined]),
  sort: faker.helpers.randomize([
    {
      empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  totalElements: faker.helpers.randomize([faker.datatype.number(), undefined]),
  totalPages: faker.helpers.randomize([faker.datatype.number(), undefined]),
});

export const getGetPropertiesFilteredUsingPOSTMock = () => ({
  content: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
      address: faker.helpers.randomize([
        {
          city: faker.helpers.randomize([faker.random.word(), undefined]),
          cityId: faker.helpers.randomize([faker.random.word(), undefined]),
          coordinates: {
            lat: faker.datatype.number(),
            long: faker.datatype.number(),
          },
          number: faker.datatype.number(),
          state: faker.helpers.randomize([faker.random.word(), undefined]),
          stateId: faker.helpers.randomize([faker.random.word(), undefined]),
          street: faker.random.word(),
        },
        undefined,
      ]),
      condition: faker.helpers.randomize(["RENT", "SALE"]),
      coveredSquareFoot: faker.helpers.randomize([
        faker.datatype.number(),
        undefined,
      ]),
      fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
      id: (() => faker.datatype.uuid())(),
      price: faker.datatype.number(),
      rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
      squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
      title: faker.random.word(),
      toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
      type: faker.helpers.randomize([
        "Casa",
        "Cochera",
        "Compartido",
        "Consultorio",
        "Country",
        "Departamento",
        "Edificio",
        "Flat",
        "Galpon",
        "Hotel",
        "Local",
        "Loft",
        "Oficina",
        "PH",
        "Quinta",
        "Terreno",
      ]),
    })),
    undefined,
  ]),
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  first: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  last: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  number: faker.helpers.randomize([faker.datatype.number(), undefined]),
  numberOfElements: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  pageable: faker.helpers.randomize([
    {
      offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageNumber: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageSize: faker.helpers.randomize([faker.datatype.number(), undefined]),
      paged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sort: faker.helpers.randomize([
        {
          empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
          sorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
        },
        undefined,
      ]),
      unpaged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  size: faker.helpers.randomize([faker.datatype.number(), undefined]),
  sort: faker.helpers.randomize([
    {
      empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  totalElements: faker.helpers.randomize([faker.datatype.number(), undefined]),
  totalPages: faker.helpers.randomize([faker.datatype.number(), undefined]),
});

export const getGetPropertyUsingGETMock = () => ({
  address: faker.helpers.randomize([
    {
      city: faker.helpers.randomize([faker.random.word(), undefined]),
      cityId: faker.helpers.randomize([faker.random.word(), undefined]),
      coordinates: {
        lat: faker.datatype.number(),
        long: faker.datatype.number(),
      },
      number: faker.datatype.number(),
      state: faker.helpers.randomize([faker.random.word(), undefined]),
      stateId: faker.helpers.randomize([faker.random.word(), undefined]),
      street: faker.random.word(),
    },
    undefined,
  ]),
  amenities: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
    properties: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
      () => ({
        address: faker.helpers.randomize([
          {
            city: {
              centroid: {},
              gid: (() => faker.datatype.uuid())(),
              id: (() => faker.datatype.uuid())(),
              name: faker.random.word(),
              state: {
                centroid: {},
                country: {
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                },
                gid: (() => faker.datatype.uuid())(),
                id: (() => faker.datatype.uuid())(),
                name: faker.random.word(),
              },
            },
            coordinates: {
              id: (() => faker.datatype.uuid())(),
              lat: faker.datatype.number(),
              long: faker.datatype.number(),
            },
            id: (() => faker.datatype.uuid())(),
            number: faker.datatype.number(),
            street: faker.random.word(),
          },
          undefined,
        ]),
        comments: faker.helpers.randomize([faker.random.word(), undefined]),
        condition: faker.helpers.randomize(["RENT", "SALE"]),
        constructionDate: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        coveredSquareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        creationDate: faker.helpers.randomize([faker.date.recent(), undefined]),
        environments: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
        fullBaths: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        id: (() => faker.datatype.uuid())(),
        images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            fileData: faker.random.word(),
            fileName: faker.helpers.randomize([faker.random.word(), undefined]),
            fileType: faker.helpers.randomize([faker.random.word(), undefined]),
            id: (() => faker.datatype.uuid())(),
          })
        ),
        levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
        likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            birthDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            email: (() => faker.internet.email())(),
            id: (() => faker.datatype.uuid())(),
            likedProperties: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              address: faker.helpers.randomize([
                {
                  city: {
                    centroid: {},
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                    state: {
                      centroid: {},
                      country: {
                        id: (() => faker.datatype.uuid())(),
                        name: faker.random.word(),
                      },
                      gid: (() => faker.datatype.uuid())(),
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                  },
                  coordinates: {
                    id: (() => faker.datatype.uuid())(),
                    lat: faker.datatype.number(),
                    long: faker.datatype.number(),
                  },
                  id: (() => faker.datatype.uuid())(),
                  number: faker.datatype.number(),
                  street: faker.random.word(),
                },
                undefined,
              ]),
              comments: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              condition: faker.helpers.randomize(["RENT", "SALE"]),
              constructionDate: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              contacts: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              coveredSquareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              creationDate: faker.helpers.randomize([
                faker.date.recent(),
                undefined,
              ]),
              environments: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              expenses: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              fullBaths: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              id: (() => faker.datatype.uuid())(),
              images: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })),
              levels: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                () => faker.random.word()
              ),
              materials: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              openHouse: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                day: faker.date.recent(),
                finalTime: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                initialTime: faker.random.word(),
              })),
              owner: {
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              },
              parkDescription: faker.helpers.randomize([
                faker.random.word(),
                undefined,
              ]),
              price: faker.datatype.number(),
              rooms: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              security: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              })),
              squareFoot: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              step: faker.datatype.number(),
              style: faker.helpers.randomize([
                {
                  id: (() => faker.datatype.uuid())(),
                  label: faker.random.word(),
                },
                undefined,
              ]),
              title: faker.random.word(),
              toilets: faker.helpers.randomize([
                faker.datatype.number(),
                undefined,
              ]),
              type: faker.helpers.randomize([
                "Casa",
                "Cochera",
                "Compartido",
                "Consultorio",
                "Country",
                "Departamento",
                "Edificio",
                "Flat",
                "Galpon",
                "Hotel",
                "Local",
                "Loft",
                "Oficina",
                "PH",
                "Quinta",
                "Terreno",
              ]),
            })),
            password: faker.helpers.randomize([faker.random.word(), undefined]),
            userName: faker.random.word(),
            userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
            userRole: {
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              permissions: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
                userRoles: [
                  ...Array(faker.datatype.number({ min: 1, max: 10 })),
                ].map(() => ({
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                })),
              })),
              slug: faker.random.word(),
              title: faker.random.word(),
            },
          })
        ),
        links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
          faker.random.word()
        ),
        materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            day: faker.date.recent(),
            finalTime: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            initialTime: faker.random.word(),
          })
        ),
        owner: {
          birthDate: faker.helpers.randomize([faker.date.recent(), undefined]),
          email: (() => faker.internet.email())(),
          id: (() => faker.datatype.uuid())(),
          likedProperties: [
            ...Array(faker.datatype.number({ min: 1, max: 10 })),
          ].map(() => ({
            address: faker.helpers.randomize([
              {
                city: {
                  centroid: {},
                  gid: (() => faker.datatype.uuid())(),
                  id: (() => faker.datatype.uuid())(),
                  name: faker.random.word(),
                  state: {
                    centroid: {},
                    country: {
                      id: (() => faker.datatype.uuid())(),
                      name: faker.random.word(),
                    },
                    gid: (() => faker.datatype.uuid())(),
                    id: (() => faker.datatype.uuid())(),
                    name: faker.random.word(),
                  },
                },
                coordinates: {
                  id: (() => faker.datatype.uuid())(),
                  lat: faker.datatype.number(),
                  long: faker.datatype.number(),
                },
                id: (() => faker.datatype.uuid())(),
                number: faker.datatype.number(),
                street: faker.random.word(),
              },
              undefined,
            ]),
            comments: faker.helpers.randomize([faker.random.word(), undefined]),
            condition: faker.helpers.randomize(["RENT", "SALE"]),
            constructionDate: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            contacts: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              email: (() => faker.internet.email())(),
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            coveredSquareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            creationDate: faker.helpers.randomize([
              faker.date.recent(),
              undefined,
            ]),
            environments: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            expenses: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            fullBaths: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            id: (() => faker.datatype.uuid())(),
            images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                fileData: faker.random.word(),
                fileName: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                fileType: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                id: (() => faker.datatype.uuid())(),
              })
            ),
            levels: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            likes: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => ({
                birthDate: faker.helpers.randomize([
                  faker.date.recent(),
                  undefined,
                ]),
                email: (() => faker.internet.email())(),
                id: (() => faker.datatype.uuid())(),
                password: faker.helpers.randomize([
                  faker.random.word(),
                  undefined,
                ]),
                userName: faker.random.word(),
                userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
                userRole: {
                  active: faker.datatype.boolean(),
                  creationDate: faker.date.recent(),
                  description: faker.random.word(),
                  id: (() => faker.datatype.uuid())(),
                  permissions: [
                    ...Array(faker.datatype.number({ min: 1, max: 10 })),
                  ].map(() => ({
                    active: faker.datatype.boolean(),
                    creationDate: faker.date.recent(),
                    description: faker.random.word(),
                    id: (() => faker.datatype.uuid())(),
                    slug: faker.random.word(),
                    title: faker.random.word(),
                    userRoles: [
                      ...Array(faker.datatype.number({ min: 1, max: 10 })),
                    ].map(() => ({
                      active: faker.datatype.boolean(),
                      creationDate: faker.date.recent(),
                      description: faker.random.word(),
                      id: (() => faker.datatype.uuid())(),
                      slug: faker.random.word(),
                      title: faker.random.word(),
                    })),
                  })),
                  slug: faker.random.word(),
                  title: faker.random.word(),
                },
              })
            ),
            links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
              () => faker.random.word()
            ),
            materials: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            openHouse: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              day: faker.date.recent(),
              finalTime: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              initialTime: faker.random.word(),
            })),
            parkDescription: faker.helpers.randomize([
              faker.random.word(),
              undefined,
            ]),
            price: faker.datatype.number(),
            rooms: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            security: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              id: (() => faker.datatype.uuid())(),
              label: faker.random.word(),
            })),
            squareFoot: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            step: faker.datatype.number(),
            style: faker.helpers.randomize([
              {
                id: (() => faker.datatype.uuid())(),
                label: faker.random.word(),
              },
              undefined,
            ]),
            title: faker.random.word(),
            toilets: faker.helpers.randomize([
              faker.datatype.number(),
              undefined,
            ]),
            type: faker.helpers.randomize([
              "Casa",
              "Cochera",
              "Compartido",
              "Consultorio",
              "Country",
              "Departamento",
              "Edificio",
              "Flat",
              "Galpon",
              "Hotel",
              "Local",
              "Loft",
              "Oficina",
              "PH",
              "Quinta",
              "Terreno",
            ]),
          })),
          password: faker.helpers.randomize([faker.random.word(), undefined]),
          userName: faker.random.word(),
          userOrigin: faker.helpers.randomize(["GOOGLE", "UBICAR"]),
          userRole: {
            active: faker.datatype.boolean(),
            creationDate: faker.date.recent(),
            description: faker.random.word(),
            id: (() => faker.datatype.uuid())(),
            permissions: [
              ...Array(faker.datatype.number({ min: 1, max: 10 })),
            ].map(() => ({
              active: faker.datatype.boolean(),
              creationDate: faker.date.recent(),
              description: faker.random.word(),
              id: (() => faker.datatype.uuid())(),
              slug: faker.random.word(),
              title: faker.random.word(),
              userRoles: [
                ...Array(faker.datatype.number({ min: 1, max: 10 })),
              ].map(() => ({
                active: faker.datatype.boolean(),
                creationDate: faker.date.recent(),
                description: faker.random.word(),
                id: (() => faker.datatype.uuid())(),
                slug: faker.random.word(),
                title: faker.random.word(),
              })),
            })),
            slug: faker.random.word(),
            title: faker.random.word(),
          },
        },
        parkDescription: faker.helpers.randomize([
          faker.random.word(),
          undefined,
        ]),
        price: faker.datatype.number(),
        rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
        security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
          () => ({
            id: (() => faker.datatype.uuid())(),
            label: faker.random.word(),
          })
        ),
        squareFoot: faker.helpers.randomize([
          faker.datatype.number(),
          undefined,
        ]),
        step: faker.datatype.number(),
        style: faker.helpers.randomize([
          { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
          undefined,
        ]),
        title: faker.random.word(),
        toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
        type: faker.helpers.randomize([
          "Casa",
          "Cochera",
          "Compartido",
          "Consultorio",
          "Country",
          "Departamento",
          "Edificio",
          "Flat",
          "Galpon",
          "Hotel",
          "Local",
          "Loft",
          "Oficina",
          "PH",
          "Quinta",
          "Terreno",
        ]),
      })
    ),
  })),
  comments: (() => faker.lorem.sentences(5))(),
  condition: faker.helpers.randomize(["RENT", "SALE"]),
  constructionDate: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  contacts: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    email: (() => faker.internet.email())(),
    label: faker.random.word(),
  })),
  coveredSquareFoot: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  environments: faker.helpers.randomize([faker.datatype.number(), undefined]),
  expenses: faker.helpers.randomize([faker.datatype.number(), undefined]),
  fullBaths: faker.helpers.randomize([faker.datatype.number(), undefined]),
  id: (() => faker.datatype.uuid())(),
  images: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  levels: faker.helpers.randomize([faker.datatype.number(), undefined]),
  liked: faker.datatype.boolean(),
  links: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
  materials: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  openHouse: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    day: faker.date.recent(),
    finalTime: faker.random.word(),
    initialTime: faker.random.word(),
  })),
  parkDescription: (() => faker.lorem.sentences(3))(),
  price: faker.datatype.number(),
  rooms: faker.helpers.randomize([faker.datatype.number(), undefined]),
  security: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: (() => faker.datatype.uuid())(),
    label: faker.random.word(),
  })),
  squareFoot: faker.helpers.randomize([faker.datatype.number(), undefined]),
  step: faker.datatype.number(),
  style: faker.helpers.randomize([
    { id: (() => faker.datatype.uuid())(), label: faker.random.word() },
    undefined,
  ]),
  title: faker.random.word(),
  toilets: faker.helpers.randomize([faker.datatype.number(), undefined]),
  type: faker.helpers.randomize([
    "Casa",
    "Cochera",
    "Compartido",
    "Consultorio",
    "Country",
    "Departamento",
    "Edificio",
    "Flat",
    "Galpon",
    "Hotel",
    "Local",
    "Loft",
    "Oficina",
    "PH",
    "Quinta",
    "Terreno",
  ]),
});

export const getGetStatesUsingGETMock = () => ({
  content: faker.helpers.randomize([
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
      id: (() => faker.datatype.uuid())(),
      name: faker.random.word(),
    })),
    undefined,
  ]),
  empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  first: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  last: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
  number: faker.helpers.randomize([faker.datatype.number(), undefined]),
  numberOfElements: faker.helpers.randomize([
    faker.datatype.number(),
    undefined,
  ]),
  pageable: faker.helpers.randomize([
    {
      offset: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageNumber: faker.helpers.randomize([faker.datatype.number(), undefined]),
      pageSize: faker.helpers.randomize([faker.datatype.number(), undefined]),
      paged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sort: faker.helpers.randomize([
        {
          empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
          sorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.randomize([
            faker.datatype.boolean(),
            undefined,
          ]),
        },
        undefined,
      ]),
      unpaged: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  size: faker.helpers.randomize([faker.datatype.number(), undefined]),
  sort: faker.helpers.randomize([
    {
      empty: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    },
    undefined,
  ]),
  totalElements: faker.helpers.randomize([faker.datatype.number(), undefined]),
  totalPages: faker.helpers.randomize([faker.datatype.number(), undefined]),
});

export const getEditUserUsingPUTMock = () => ({
  email: (() => faker.internet.email())(),
  id: (() => faker.datatype.uuid())(),
  userName: faker.random.word(),
});

export const getApiDocumentationMSW = () => [
  rest.post("*/auth/google-login", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getLoginWithGoogleUsingPOSTMock())
    );
  }),
  rest.post("*/auth/login", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getLoginUsingPOSTMock())
    );
  }),
  rest.post("*/auth/logout", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getLogOutUsingPOSTMock())
    );
  }),
  rest.get("*/auth/me", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetLoggedUsingGETMock())
    );
  }),
  rest.post("*/auth/register", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getRegisterUsingPOSTMock())
    );
  }),
  rest.get("*/auth/roles", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.put("*/dislike/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getDislikePropertyUsingPUTMock())
    );
  }),
  rest.get("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingGETMock())
    );
  }),
  rest.head("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingHEADMock())
    );
  }),
  rest.post("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPOSTMock())
    );
  }),
  rest.put("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPUTMock())
    );
  }),
  rest.delete("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingDELETEMock())
    );
  }),
  rest.patch("*/error", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getErrorHtmlUsingPATCHMock())
    );
  }),
  rest.get("*/get-filters", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.put("*/like/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getLikePropertyUsingPUTMock())
    );
  }),
  rest.post("*/property/create", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getCreatePropertyUsingPOSTMock())
    );
  }),
  rest.post("*/property/create-with-images", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getCreatePropertyWithImagesUsingPOSTMock())
    );
  }),
  rest.get("*/property/favorites", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/property/own", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.put("*/property/with-images/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getEditPropertyWithImagesUsingPUTMock())
    );
  }),
  rest.put("*/property/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getEditPropertyUsingPUTMock())
    );
  }),
  rest.get("*/public/cities/:stateId", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetCitiesUsingGETMock())
    );
  }),
  rest.get("*/public/image/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetImageUsingGETMock())
    );
  }),
  rest.get("*/public/info/amenities", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/info/materials", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/info/securities", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/info/styles", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/info/types", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.post("*/public/property/contact/:id", (req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/public/property/preview", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPropertiesUsingGETMock())
    );
  }),
  rest.post("*/public/property/preview/by-filter", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPropertiesFilteredUsingPOSTMock())
    );
  }),
  rest.get("*/public/property/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetPropertyUsingGETMock())
    );
  }),
  rest.get("*/public/states", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetStatesUsingGETMock())
    );
  }),
  rest.put("*/user/:id", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getEditUserUsingPUTMock())
    );
  }),
];
