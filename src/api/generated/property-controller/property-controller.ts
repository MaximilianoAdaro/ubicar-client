/*
 * Generated by orval v5.4.8 üç∫
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import { useMutation, UseMutationOptions } from "react-query";
import type { PropertyDTO, CreatePropertyDTOBody } from "../endpoints.schemas";
import { customInstance } from "../../mutator/custom-instance";

type AsyncReturnType<
  T extends (...args: any) => Promise<any>,
  U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const createPropertyUsingPOST = <TData = PropertyDTO>(
  createPropertyDTOBody: CreatePropertyDTOBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TData>(
    { url: `/property/create`, method: "post", data: createPropertyDTOBody },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useCreatePropertyUsingPOST = <
  TData = AsyncReturnType<typeof createPropertyUsingPOST, PropertyDTO>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: CreatePropertyDTOBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { data: CreatePropertyDTOBody }, TContext>(
    (props) => {
      const { data } = props || {};

      return createPropertyUsingPOST<TData>(data, requestOptions);
    },
    mutationOptions
  );
};
export const editPropertyUsingPUT = <TData = PropertyDTO>(
  id: string,
  createPropertyDTOBody: CreatePropertyDTOBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TData>(
    { url: `/property/${id}`, method: "put", data: createPropertyDTOBody },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useEditPropertyUsingPUT = <
  TData = AsyncReturnType<typeof editPropertyUsingPUT, PropertyDTO>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: CreatePropertyDTOBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    { id: string; data: CreatePropertyDTOBody },
    TContext
  >((props) => {
    const { id, data } = props || {};

    return editPropertyUsingPUT<TData>(id, data, requestOptions);
  }, mutationOptions);
};
