/*
 * Generated by orval v5.4.6 üç∫
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  UseInfiniteQueryOptions,
  UseMutationOptions,
} from "react-query";
import type {
  PropertyDTO,
  CreatePropertyDTOBody,
  PagePropertyPreviewDTO,
  GetPropertiesUsingGETParams,
} from "../endpoints.schemas";
import { customInstance } from "../../mutator/custom-instance";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const createPropertyUsingPOST = <Data = unknown>(
  createPropertyDTOBody: CreatePropertyDTOBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? PropertyDTO | unknown : Data>(
    { url: `/create`, method: "post", data: createPropertyDTOBody },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useCreatePropertyUsingPOST = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof createPropertyUsingPOST>,
    Error,
    { data: CreatePropertyDTOBody },
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    AsyncReturnType<typeof createPropertyUsingPOST>,
    Error,
    { data: CreatePropertyDTOBody }
  >((props) => {
    const { data } = props || {};

    return createPropertyUsingPOST<Data>(data, requestOptions);
  }, mutationOptions);
};
export const getPropertiesUsingGET = <Data = unknown>(
  params?: GetPropertiesUsingGETParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? PagePropertyPreviewDTO : Data>(
    { url: `/preview`, method: "get", params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetPropertiesUsingGETQueryKey = (
  params?: GetPropertiesUsingGETParams
) => [`/preview`, ...(params ? [params] : [])];

export const useGetPropertiesUsingGETInfinite = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  params?: GetPropertiesUsingGETParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      AsyncReturnType<typeof getPropertiesUsingGET>,
      Error
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPropertiesUsingGETQueryKey(params);
  const query = useInfiniteQuery<
    AsyncReturnType<typeof getPropertiesUsingGET>,
    Error
  >(
    queryKey,
    ({ pageParam }) =>
      getPropertiesUsingGET<Data>(
        { page: pageParam, ...params },
        requestOptions
      ),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const editPropertyUsingPUT = <Data = unknown>(
  id: string,
  createPropertyDTOBody: CreatePropertyDTOBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? PropertyDTO | unknown : Data>(
    { url: `/property/${id}`, method: "put", data: createPropertyDTOBody },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useEditPropertyUsingPUT = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof editPropertyUsingPUT>,
    Error,
    { id: string; data: CreatePropertyDTOBody },
    unknown
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    AsyncReturnType<typeof editPropertyUsingPUT>,
    Error,
    { id: string; data: CreatePropertyDTOBody }
  >((props) => {
    const { id, data } = props || {};

    return editPropertyUsingPUT<Data>(id, data, requestOptions);
  }, mutationOptions);
};
