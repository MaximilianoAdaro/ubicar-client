/*
 * Generated by orval v5.4.6 üç∫
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery, UseQueryOptions } from "react-query";
import type { CityDTO, StateDTO, TownDTO } from "../endpoints.schemas";
import { customInstance } from "../../mutator/custom-instance";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getCitiesUsingGET = <Data = unknown>(
  stateId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? CityDTO[] : Data>(
    { url: `/cities/${stateId}`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetCitiesUsingGETQueryKey = (stateId: string) => [
  `/cities/${stateId}`,
];

export const useGetCitiesUsingGET = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  stateId: string,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof getCitiesUsingGET>, Error>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCitiesUsingGETQueryKey(stateId);
  const query = useQuery<AsyncReturnType<typeof getCitiesUsingGET>, Error>(
    queryKey,
    () => getCitiesUsingGET<Data>(stateId, requestOptions),
    { enabled: !!stateId, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const getStatesUsingGET = <Data = unknown>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? StateDTO[] : Data>(
    { url: `/states`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetStatesUsingGETQueryKey = () => [`/states`];

export const useGetStatesUsingGET = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof getStatesUsingGET>, Error>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetStatesUsingGETQueryKey();
  const query = useQuery<AsyncReturnType<typeof getStatesUsingGET>, Error>(
    queryKey,
    () => getStatesUsingGET<Data>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const getTownsUsingGET = <Data = unknown>(
  cityId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Data extends unknown ? TownDTO[] : Data>(
    { url: `/towns/${cityId}`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetTownsUsingGETQueryKey = (cityId: string) => [
  `/towns/${cityId}`,
];

export const useGetTownsUsingGET = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  cityId: string,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof getTownsUsingGET>, Error>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTownsUsingGETQueryKey(cityId);
  const query = useQuery<AsyncReturnType<typeof getTownsUsingGET>, Error>(
    queryKey,
    () => getTownsUsingGET<Data>(cityId, requestOptions),
    { enabled: !!cityId, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};
