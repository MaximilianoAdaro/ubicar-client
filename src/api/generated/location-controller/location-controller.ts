/*
 * Generated by orval v5.4.8 üç∫
 * Do not edit manually.
 * Api Documentation
 * Api Documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery, UseQueryOptions } from "react-query";
import type { CityDTO, StateDTO, TownDTO } from "../endpoints.schemas";
import { customInstance } from "../../mutator/custom-instance";

type AsyncReturnType<
  T extends (...args: any) => Promise<any>,
  U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getCitiesUsingGET = <TData = CityDTO[]>(
  stateId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TData>(
    { url: `/cities/${stateId}`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetCitiesUsingGETQueryKey = (stateId: string) => [
  `/cities/${stateId}`,
];

export const useGetCitiesUsingGET = <
  TQueryFnData = AsyncReturnType<typeof getCitiesUsingGET, CityDTO[]>,
  TError = unknown,
  TData = TQueryFnData
>(
  stateId: string,
  options?: {
    query?: UseQueryOptions<TQueryFnData, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCitiesUsingGETQueryKey(stateId);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => getCitiesUsingGET<TQueryFnData>(stateId, requestOptions),
    { enabled: !!stateId, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const getStatesUsingGET = <TData = StateDTO[]>(
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TData>(
    { url: `/states`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetStatesUsingGETQueryKey = () => [`/states`];

export const useGetStatesUsingGET = <
  TQueryFnData = AsyncReturnType<typeof getStatesUsingGET, StateDTO[]>,
  TError = unknown,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetStatesUsingGETQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => getStatesUsingGET<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const getTownsUsingGET = <TData = TownDTO[]>(
  cityId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TData>(
    { url: `/towns/${cityId}`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetTownsUsingGETQueryKey = (cityId: string) => [
  `/towns/${cityId}`,
];

export const useGetTownsUsingGET = <
  TQueryFnData = AsyncReturnType<typeof getTownsUsingGET, TownDTO[]>,
  TError = unknown,
  TData = TQueryFnData
>(
  cityId: string,
  options?: {
    query?: UseQueryOptions<TQueryFnData, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTownsUsingGETQueryKey(cityId);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => getTownsUsingGET<TQueryFnData>(cityId, requestOptions),
    { enabled: !!cityId, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};
